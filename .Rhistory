i=1
sum(n_gac_params[1:i])+1:n_gac_params[i]]
sum(n_gac_params[1:i])+1:n_gac_params[i]
sum(n_gac_params[1:i])-1+1:n_gac_params[i]
i=2
sum(n_gac_params[1:i])-1+1:n_gac_params[i]
sum(n_gac_params[0])-1+1:n_gac_params[i]
sum(n_gac_params[0:(i-1_])+1:n_gac_params[i]
sum(n_gac_params[0:(i-1)]+1:n_gac_params[i]
sum(n_gac_params[0:(i-1)])+1:n_gac_params[i]
i=1
sum(n_gac_params[0:(i-1)])+1:n_gac_params[i]
i=2
sum(n_gac_params[0:(i-1)])+1:n_gac_params[i]
i=3
sum(n_gac_params[0:(i-1)])+1:n_gac_params[i]
c(1:3)
c(1:3)[1]
c(1:3)[[1]]
## Create objective function for model parameters ~ need some penalty on smoothness?
obj_gac <- function(gac_params,design_mat,R,Emp_Cov,cov_func,loss="WLS"){
# Calculate parametric covairance matrix from supplied parameters
n_gac_params <- unlist(lapply(design_mat,ncol))
params <- list()
for(i in 1:length(design_mat)){
params[[i]] <-  matrix(design_mat[[i]] %*% gac_params[
sum(n_gac_params[0:(i-1)])+1:n_gac_params[i]],
ncol = ncol(R))
}
obj(params = params,R = R,Emp_Cov = Emp_Cov,cov_func = cov_func,loss=loss)
}
param_init
gac_params_init <- list()
for(i in 1:length(design_mat)){
gac_params_init[[i]] <- c(param_init[i],rep(0,ncol(design_mat[[i]])-1))
}
gac_params_init
gac_params_init <- c()
for(i in 1:length(design_mat)){
gac_params_init <- c(gac_params_init,param_init[i],rep(0,ncol(design_mat[[i]])-1))
}
gac_params_init
# Check first evaluation...
temp_test <- try(obj_gac(gac_params = gac_params_init,design_mat = design_mat,
R = R,Emp_Cov = Emp_Cov,cov_func = cov_func))
temp_test
if(class(temp_test)=="try.error"){stop("First evaluation of objective function (with param_init) failed.")}
rm(temp_test)
gac_params_init
# Optimisation...
Fit1 <- optim(par=gac_params_init,
obj_gac,
# method = "L-BFGS-B",
# lower=cov_func(return_param_limits=T)$lower,
# upper = cov_func(return_param_limits=T)$upper,
method="BFGS",
R=R,
Emp_Cov = Emp_Cov,
cov_func=cov_func)
# Optimisation...
Fit1 <- optim(par=gac_params_init,
obj_gac,
# method = "L-BFGS-B",
# lower=cov_func(return_param_limits=T)$lower,
# upper = cov_func(return_param_limits=T)$upper,
method="BFGS",
design_mat = design_mat,
R=R,
Emp_Cov = Emp_Cov,
cov_func=cov_func)
output <- (params[[1]]^2)*exp(-(params[[2]]*r)^params[[3]])
## Powered Exponential
PowExp <- function(r=NULL,params=list(sigma=1,theta=1,gamma=1),return_param_limits=F,optim_bound=F){
if(return_param_limits){
return(list(lower=c(0,.Machine$double.eps,.Machine$double.eps),
upper=c(Inf,Inf,2)))
}else{
if(is.null(r)){stop("r missing with no default.")}
if(optim_bound){
if(any(params[[1]] < 0)){return(Inf)}
if(any(params[[2]] <=0)){return(Inf)}
if(any(params[[3]] <= 0 | params[[3]] > 2)){return(Inf)}
}else{
if(any(params[[1]] < 0)){stop("sigma<0")}
if(any(params[[2]] <=0)){stop("theta<=0")}
if(any(params[[3]] <= 0 | params[[3]] > 2)){stop("gamma <= 0 | gamma > 2")}
}
return((params[[1]]^2)*exp(-(params[[2]]*r)^params[[3]]))
}
}
cov_func <- PowExp()
cov_func <- PowExp
# Optimisation...
Fit1 <- optim(par=gac_params_init,
obj_gac,
# method = "L-BFGS-B",
# lower=cov_func(return_param_limits=T)$lower,
# upper = cov_func(return_param_limits=T)$upper,
method="BFGS",
design_mat = design_mat,
R=R,
Emp_Cov = Emp_Cov,
cov_func=cov_func)
# Optimisation...
Fit1 <- optim(par=gac_params_init,
obj_gac,
# method = "L-BFGS-B",
# lower=cov_func(return_param_limits=T)$lower,
# upper = cov_func(return_param_limits=T)$upper,
method="BFGS",
optim_bound=T
design_mat = design_mat,
R=R,
Emp_Cov = Emp_Cov,
cov_func=cov_func)
# Optimisation...
Fit1 <- optim(par=gac_params_init,
obj_gac,
# method = "L-BFGS-B",
# lower=cov_func(return_param_limits=T)$lower,
# upper = cov_func(return_param_limits=T)$upper,
method="BFGS",
optim_bound=T,
design_mat = design_mat,
R=R,
Emp_Cov = Emp_Cov,
cov_func=cov_func)
## Create objective function for model parameters ~ need some penalty on smoothness?
obj_gac <- function(gac_params,design_mat,R,Emp_Cov,cov_func,loss="WLS",...){
# Calculate parametric covairance matrix from supplied parameters
n_gac_params <- unlist(lapply(design_mat,ncol))
params <- list()
for(i in 1:length(design_mat)){
params[[i]] <-  matrix(design_mat[[i]] %*% gac_params[
sum(n_gac_params[0:(i-1)])+1:n_gac_params[i]],
ncol = ncol(R))
}
obj(params = params,R = R,Emp_Cov = Emp_Cov,cov_func = cov_func,loss=loss,...)
}
# Optimisation...
Fit1 <- optim(par=gac_params_init,
obj_gac,
# method = "L-BFGS-B",
# lower=cov_func(return_param_limits=T)$lower,
# upper = cov_func(return_param_limits=T)$upper,
method="BFGS",
optim_bound=T,
design_mat = design_mat,
R=R,
Emp_Cov = Emp_Cov,
cov_func=cov_func)
## Create objective function for model parameters ~ need some penalty on smoothness?
obj_gac <- function(gac_params,design_mat,R,Emp_Cov,cov_func,loss="WLS"){
# Calculate parametric covairance matrix from supplied parameters
n_gac_params <- unlist(lapply(design_mat,ncol))
params <- list()
for(i in 1:length(design_mat)){
params[[i]] <-  matrix(design_mat[[i]] %*% gac_params[
sum(n_gac_params[0:(i-1)])+1:n_gac_params[i]],
ncol = ncol(R))
}
obj(params = params,R = R,Emp_Cov = Emp_Cov,cov_func = cov_func,loss=loss,optim_bound=T)
}
# Check first evaluation...
temp_test <- try(obj_gac(gac_params = gac_params_init,design_mat = design_mat,
R = R,Emp_Cov = Emp_Cov,cov_func = cov_func))
obj <- function(params,R,Emp_Cov,cov_func,loss="WLS",...){
# Calculate parametric covairance matrix from supplied parameters
Par_cov <- cov_func(r = R,params,...)
if(loss=="WLS"){
# Weighted least squares of covariance only (VARIANCE excluded!)
mean(((Emp_Cov-Par_cov)/abs(1-cov2cor(Par_cov)))[R!=0]^2)
}else if(loss=="LS"){
# Least squares (including variance)
mean((Emp_Cov-Par_cov))^2
}else{
stop("Loss not recognised.")
}
}
## Create objective function for model parameters ~ need some penalty on smoothness?
obj_gac <- function(gac_params,design_mat,R,Emp_Cov,cov_func,loss="WLS"){
# Calculate parametric covairance matrix from supplied parameters
n_gac_params <- unlist(lapply(design_mat,ncol))
params <- list()
for(i in 1:length(design_mat)){
params[[i]] <-  matrix(design_mat[[i]] %*% gac_params[
sum(n_gac_params[0:(i-1)])+1:n_gac_params[i]],
ncol = ncol(R))
}
obj(params = params,R = R,Emp_Cov = Emp_Cov,cov_func = cov_func,loss=loss,optim_bound=T)
}
# Check first evaluation...
temp_test <- try(obj_gac(gac_params = gac_params_init,design_mat = design_mat,
R = R,Emp_Cov = Emp_Cov,cov_func = cov_func))
temp_test
# Optimisation...
Fit1 <- optim(par=gac_params_init,
obj_gac,
# method = "L-BFGS-B",
# lower=cov_func(return_param_limits=T)$lower,
# upper = cov_func(return_param_limits=T)$upper,
method="BFGS",
design_mat = design_mat,
R=R,
Emp_Cov = Emp_Cov,
cov_func=cov_func)
# Optimisation...
Fit1 <- optim(par=gac_params_init,
obj_gac,
# method = "L-BFGS-B",
# lower=cov_func(return_param_limits=T)$lower,
# upper = cov_func(return_param_limits=T)$upper,
method="BFGS",
design_mat = design_mat,
R=R,
Emp_Cov = Emp_Cov,
cov_func=cov_func)
# Optimisation...
Fit1 <- optim(par=gac_params_init,
obj_gac,
# method = "L-BFGS-B",
# lower=cov_func(return_param_limits=T)$lower,
# upper = cov_func(return_param_limits=T)$upper,
method="BFGS",
design_mat = design_mat,
R=R,
Emp_Cov = Emp_Cov,
cov_func=cov_func)
# Optimisation...
Fit1 <- optim(par=gac_params_init,
obj_gac,
# method = "L-BFGS-B",
# lower=cov_func(return_param_limits=T)$lower,
# upper = cov_func(return_param_limits=T)$upper,
method="BFGS",
design_mat = design_mat,
R=R,
Emp_Cov = Emp_Cov,
cov_func=cov_func)
1
gac_params_init
# Optimisation...
Fit1 <- optim(par=gac_params_init,
obj_gac,
# method = "L-BFGS-B",
# lower=cov_func(return_param_limits=T)$lower,
# upper = cov_func(return_param_limits=T)$upper,
method="BFGS",
design_mat = design_mat,
R=R,
Emp_Cov = Emp_Cov,
cov_func=cov_func)
debug
debug(optim)
# Optimisation...
Fit1 <- optim(par=gac_params_init,
obj_gac,
# method = "L-BFGS-B",
# lower=cov_func(return_param_limits=T)$lower,
# upper = cov_func(return_param_limits=T)$upper,
method="BFGS",
design_mat = design_mat,
R=R,
Emp_Cov = Emp_Cov,
cov_func=cov_func)
debug(obj)
undebug(optim)
# Optimisation...
Fit1 <- optim(par=gac_params_init,
obj_gac,
# method = "L-BFGS-B",
# lower=cov_func(return_param_limits=T)$lower,
# upper = cov_func(return_param_limits=T)$upper,
method="BFGS",
design_mat = design_mat,
R=R,
Emp_Cov = Emp_Cov,
cov_func=cov_func)
Par_cov
R
# Calculate parametric covairance matrix from supplied parameters
Par_cov <- cov_func(r = R,params,...)
Par_cov
Emp_Cov
# Weighted least squares of covariance only (VARIANCE excluded!)
mean(((Emp_Cov-Par_cov)/abs(1-cov2cor(Par_cov)))[R!=0]^2)
cov2cor(matrix(c(1,0,0,1),ncol=2))
cov2cor(matrix(c(1,0,0,1.1),ncol=2))
cov2cor(matrix(c(1,0,0,Inf),ncol=2))
cov2cor(matrix(c(1,0,Inf,Inf),ncol=2))
cov2cor(matrix(c(1,0,Inf,1),ncol=2))
cov2cor(matrix(c(1,NA,Inf,1),ncol=2))
cov2cor(matrix(c(1,2,Inf,1),ncol=2))
cov2cor(matrix(c(1,1,Inf,1),ncol=2))
# Optimisation...
Fit1 <- optim(par=gac_params_init,
obj_gac,
# method = "L-BFGS-B",
# lower=cov_func(return_param_limits=T)$lower,
# upper = cov_func(return_param_limits=T)$upper,
method="BFGS",
design_mat = design_mat,
R=R,
Emp_Cov = Emp_Cov,
cov_func=cov_func)
undebug(obj)
# Optimisation...
Fit1 <- optim(par=gac_params_init,
obj_gac,
# method = "L-BFGS-B",
# lower=cov_func(return_param_limits=T)$lower,
# upper = cov_func(return_param_limits=T)$upper,
method="BFGS",
design_mat = design_mat,
R=R,
loss="LS",
Emp_Cov = Emp_Cov,
cov_func=cov_func)
Fit1
debug(cov2cor)
# Optimisation...
Fit1 <- optim(par=gac_params_init,
obj_gac,
# method = "L-BFGS-B",
# lower=cov_func(return_param_limits=T)$lower,
# upper = cov_func(return_param_limits=T)$upper,
method="BFGS",
design_mat = design_mat,
R=R,
loss="WLS",
Emp_Cov = Emp_Cov,
cov_func=cov_func)
# Optimisation...
Fit1 <- optim(par=gac_params_init,
obj_gac,
# method = "L-BFGS-B",
# lower=cov_func(return_param_limits=T)$lower,
# upper = cov_func(return_param_limits=T)$upper,
method="BFGS",
design_mat = design_mat,
R=R,
loss="WLS",
Emp_Cov = Emp_Cov,
cov_func=cov_func)
# Optimisation...
Fit1 <- optim(par=gac_params_init,
obj_gac,
# method = "L-BFGS-B",
# lower=cov_func(return_param_limits=T)$lower,
# upper = cov_func(return_param_limits=T)$upper,
method="BFGS",
design_mat = design_mat,
R=R,
loss="WLS",
Emp_Cov = Emp_Cov,
cov_func=cov_func)
V
V
undebug(cov2cor)
# Optimisation...
Fit1 <- optim(par=gac_params_init,
obj_gac,
# method = "L-BFGS-B",
# lower=cov_func(return_param_limits=T)$lower,
# upper = cov_func(return_param_limits=T)$upper,
method="BFGS",
design_mat = design_mat,
R=R,
loss="WLS",
Emp_Cov = Emp_Cov,
cov_func=cov_func)
# Optimisation...
Fit1 <- optim(par=gac_params_init,
obj_gac,
# method = "L-BFGS-B",
# lower=cov_func(return_param_limits=T)$lower,
# upper = cov_func(return_param_limits=T)$upper,
method="BFGS",
design_mat = design_mat,
R=R,
loss="WLS",
Emp_Cov = Emp_Cov,
cov_func=cov_func)
V
cond
addr
debug(cov2cor)
# Optimisation...
Fit1 <- optim(par=gac_params_init,
obj_gac,
# method = "L-BFGS-B",
# lower=cov_func(return_param_limits=T)$lower,
# upper = cov_func(return_param_limits=T)$upper,
method="BFGS",
design_mat = design_mat,
R=R,
loss="WLS",
Emp_Cov = Emp_Cov,
cov_func=cov_func)
V
V
V
V
V
V
V
V
V
V
V
V
V
V
V
V
V
V
R
params
## Powered Exponential
PowExp <- function(r=NULL,params=list(sigma=1,theta=1,gamma=1),return_param_limits=F,optim_bound=F){
if(return_param_limits){
return(list(lower=c(0,.Machine$double.eps,.Machine$double.eps),
upper=c(Inf,Inf,2)))
}else{
if(is.null(r)){stop("r missing with no default.")}
if(!optim_bound){
if(any(params[[1]] < 0)){stop("sigma<0")}
if(any(params[[2]] <=0)){stop("theta<=0")}
if(any(params[[3]] <= 0 | params[[3]] > 2)){stop("gamma <= 0 | gamma > 2")}
}
output <- (params[[1]]^2)*exp(-(params[[2]]*r)^params[[3]])
if(optim_bound){
output[params[[1]] < 0))] <- Inf
output[params[[2]] <=0))] <- Inf
output[params[[3]] <= 0 | params[[3]] > 2] <- Inf
}
return(output)
}
}
## Powered Exponential
PowExp <- function(r=NULL,params=list(sigma=1,theta=1,gamma=1),return_param_limits=F,optim_bound=F){
if(return_param_limits){
return(list(lower=c(0,.Machine$double.eps,.Machine$double.eps),
upper=c(Inf,Inf,2)))
}else{
if(is.null(r)){stop("r missing with no default.")}
if(!optim_bound){
if(any(params[[1]] < 0)){stop("sigma<0")}
if(any(params[[2]] <=0)){stop("theta<=0")}
if(any(params[[3]] <= 0 | params[[3]] > 2)){stop("gamma <= 0 | gamma > 2")}
}
output <- (params[[1]]^2)*exp(-(params[[2]]*r)^params[[3]])
if(optim_bound){
output[params[[1]] < 0] <- Inf
output[params[[2]] <=0] <- Inf
output[params[[3]] <= 0 | params[[3]] > 2] <- Inf
}
return(output)
}
}
cov_func <- PowExp
# Optimisation...
Fit1 <- optim(par=gac_params_init,
obj_gac,
# method = "L-BFGS-B",
# lower=cov_func(return_param_limits=T)$lower,
# upper = cov_func(return_param_limits=T)$upper,
method="BFGS",
design_mat = design_mat,
R=R,
loss="WLS",
Emp_Cov = Emp_Cov,
cov_func=cov_func)
undebug(cov2cor)
# Optimisation...
Fit1 <- optim(par=gac_params_init,
obj_gac,
# method = "L-BFGS-B",
# lower=cov_func(return_param_limits=T)$lower,
# upper = cov_func(return_param_limits=T)$upper,
method="BFGS",
design_mat = design_mat,
R=R,
loss="WLS",
Emp_Cov = Emp_Cov,
cov_func=cov_func)
Fit1
?match.call
design_mat
class(Fit1)
Fit1$par
param_est <- list()
gac_coef <- list()
n_gac_coef <- unlist(lapply(design_mat,ncol))
for(i in 1:length(design_mat)){
param_est[[i]] <-  matrix(design_mat[[i]] %*% gac_coef[
sum(n_gac_coef[0:(i-1)])+1:n_gac_coef[i]],
ncol = ncol(R))
gac_coef[[i]] <- Fit1$par[sum(n_gac_coef[0:(i-1)])+1:n_gac_coef[i]]
}
param_est <- list()
gac_coef <- list()
n_gac_coef <- unlist(lapply(design_mat,ncol))
for(i in 1:length(design_mat)){
gac_coef[[i]] <- Fit1$par[sum(n_gac_coef[0:(i-1)])+1:n_gac_coef[i]]
param_est[[i]] <-  matrix(design_mat[[i]] %*% gac_coef[[i]],ncol = ncol(R))
}
gac_coef
cov_func(r=R,params = param_est)
Sys.getenv()
sessionInfo()
