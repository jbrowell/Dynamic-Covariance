for(i in 1:nrow(Z_oos)){
pb$tick()
if(cov_mats$Name[cov_i]=="True"){
cov_temp <- PowExp(R,params = list(sigma=1,theta=theta_fn(x_oos[i]),gamma=1))
}else if(cov_mats$Name[cov_i]=="Static Empirical"){
cov_temp <- cov(Z)
}else if(cov_mats$Name[cov_i]=="GAC-Linear"){
cov_temp <- PowExp(R,params = list(sigma=1,theta=theta_fn_linear_pred(x_oos[i]),gamma=1))
}else if(cov_mats$Name[cov_i]=="GAC-CR"){
cov_temp <- PowExp(R,params = list(sigma=1,theta=theta_fn_smooth_pred(x_oos[i]),gamma=1))
}else{
stop("cov_i not recognised.")
}
# Draw sample trajectories
traj <- mvnfast::rmvn(n = N,
mu=rep(0,ncol(R)),sigma = cov_temp)
# es and vs
scores[index==i & Name==cov_mats$Name[[cov_i]], es := es_sample(y=Z_oos[i,],dat = t(traj))]
scores[index==i & Name==cov_mats$Name[[cov_i]], vs_0_5 := vs_sample_quick(y=Z_oos[i,],dat = t(traj), p = 0.5)]
scores[index==i & Name==cov_mats$Name[[cov_i]], vs_1 := vs_sample_quick(y=Z_oos[i,],dat = t(traj), p = 1)]
# log score
scores[index==i & Name==cov_mats$Name[[cov_i]], ls := -log(mvnfast::dmvn(X = Z_oos[i,],mu = rep(0,ncol(R)),sigma = cov_temp))]
# Entropy
scores[index==i & Name==cov_mats$Name[[cov_i]], entropy :=
cov_entropy(R_true = PowExp(R,params = list(sigma=1,theta=theta_fn(x_oos[i]),gamma=1)),
R_est = cov_temp)]
}
}
## Realisations
N_oos <- N
x_oos <- runif(N_oos)
# Empirical from simulation
Z_oos <- matrix(NA,N_oos,ncol(R))
for(i in 1:N_oos){
Z_oos[i,] <- mvnfast::rmvn(n = 1,
mu=rep(0,ncol(R)),sigma = PowExp(R,params = list(sigma=1,theta=theta_fn(x_oos[i]),gamma=1)))
}
cov_mats <- list(Name=c("True","Static Empirical","GAC-Linear","GAC-CR"))
scores <- data.table(index=rep(1:nrow(Z_oos),length(cov_mats$Name)),
Name=rep(cov_mats$Name,each=nrow(Z_oos)))
for(cov_i in 1:length(cov_mats$Name)){
print(cov_mats$Name[cov_i])
pb <- progress_bar$new(total = nrow(Z_oos))
for(i in 1:nrow(Z_oos)){
pb$tick()
if(cov_mats$Name[cov_i]=="True"){
cov_temp <- PowExp(R,params = list(sigma=1,theta=theta_fn(x_oos[i]),gamma=1))
}else if(cov_mats$Name[cov_i]=="Static Empirical"){
cov_temp <- cov(Z)
}else if(cov_mats$Name[cov_i]=="GAC-Linear"){
cov_temp <- PowExp(R,params = list(sigma=1,theta=theta_fn_linear_pred(x_oos[i]),gamma=1))
}else if(cov_mats$Name[cov_i]=="GAC-CR"){
cov_temp <- PowExp(R,params = list(sigma=1,theta=theta_fn_smooth_pred(x_oos[i]),gamma=1))
}else{
stop("cov_i not recognised.")
}
# # Draw sample trajectories
# traj <- mvnfast::rmvn(n = N,
#                       mu=rep(0,ncol(R)),sigma = cov_temp)
#
# # es and vs
# scores[index==i & Name==cov_mats$Name[[cov_i]], es := es_sample(y=Z_oos[i,],dat = t(traj))]
# scores[index==i & Name==cov_mats$Name[[cov_i]], vs_0_5 := vs_sample_quick(y=Z_oos[i,],dat = t(traj), p = 0.5)]
# scores[index==i & Name==cov_mats$Name[[cov_i]], vs_1 := vs_sample_quick(y=Z_oos[i,],dat = t(traj), p = 1)]
# log score
scores[index==i & Name==cov_mats$Name[[cov_i]], ls := -log(mvnfast::dmvn(X = Z_oos[i,],mu = rep(0,ncol(R)),sigma = cov_temp))]
# Entropy
scores[index==i & Name==cov_mats$Name[[cov_i]], entropy :=
cov_entropy(R_true = PowExp(R,params = list(sigma=1,theta=theta_fn(x_oos[i]),gamma=1)),
R_est = cov_temp)]
}
}
rm(cov_temp)
print(setorder(scores[,mean(ls),by="Name"],V1))
print(setorder(scores[,mean(entropy),by="Name"],V1))
iso_ex_smooth_fit
## GAC fit for theta
iso_ex_smooth_fit <- gac(R = R,
X = list(x1=x),
Emp_Cov = NULL,
data = Z,
cov_func = PowExp_1param,
param_eqns = list(~s(x1,bs="cr",k=5)),
loss="WLS",smoothness_param = 1e-5)
# Plot Basis Functions
matplot(x=iso_ex_smooth_fit$modelling_table$x1,
y=iso_ex_smooth_fit$gam_prefits[[1]]$X,type="l")
# Plot Smooth Fit
matplot(x=iso_ex_smooth_fit$modelling_table$x1,
y=iso_ex_smooth_fit$gam_prefits[[1]]$X *
matrix(rep(iso_ex_smooth_fit$gac_coef[[1]],each=nrow(iso_ex_smooth_fit$gam_prefits[[1]]$X)),
ncol=ncol(iso_ex_smooth_fit$gam_prefits[[1]]$X)),
type="l")
lines(iso_ex_smooth_fit$modelling_table$x1,
iso_ex_smooth_fit$gam_prefits[[1]]$X %*% iso_ex_smooth_fit$gac_coef[[1]],col=3)
## Plot different estimates of theta_fn:
plot(x[order(x)],theta_fn(x)[order(x)],type="l",ylim=c(1,3))
lines(iso_ex_linear_fit$modelling_table$x1,
iso_ex_linear_fit$gam_prefits[[1]]$X %*% iso_ex_linear_fit$gac_coef[[1]],col=2)
lines(iso_ex_smooth_fit$modelling_table$x1,
iso_ex_smooth_fit$gam_prefits[[1]]$X %*% iso_ex_smooth_fit$gac_coef[[1]],col=3)
## Plot different estimates of theta_fn:
plot(x[order(x)],theta_fn(x)[order(x)],type="l",ylim=c(1,4))
lines(iso_ex_linear_fit$modelling_table$x1,
iso_ex_linear_fit$gam_prefits[[1]]$X %*% iso_ex_linear_fit$gac_coef[[1]],col=2)
lines(iso_ex_smooth_fit$modelling_table$x1,
iso_ex_smooth_fit$gam_prefits[[1]]$X %*% iso_ex_smooth_fit$gac_coef[[1]],col=3)
## Predict function for fits
theta_fn_linear_pred <- approxfun(x = iso_ex_linear_fit$modelling_table$x1,
y = iso_ex_linear_fit$gam_prefits[[1]]$X %*% iso_ex_linear_fit$gac_coef[[1]],
rule = 2)
theta_fn_smooth_pred <- approxfun(x = iso_ex_smooth_fit$modelling_table$x1,
y = iso_ex_smooth_fit$gam_prefits[[1]]$X %*% iso_ex_smooth_fit$gac_coef[[1]],
rule = 2)
## Realisations
N_oos <- N
x_oos <- runif(N_oos)
# Empirical from simulation
Z_oos <- matrix(NA,N_oos,ncol(R))
for(i in 1:N_oos){
Z_oos[i,] <- mvnfast::rmvn(n = 1,
mu=rep(0,ncol(R)),sigma = PowExp(R,params = list(sigma=1,theta=theta_fn(x_oos[i]),gamma=1)))
}
cov_mats <- list(Name=c("True","Static Empirical","GAC-Linear","GAC-CR"))
scores <- data.table(index=rep(1:nrow(Z_oos),length(cov_mats$Name)),
Name=rep(cov_mats$Name,each=nrow(Z_oos)))
for(cov_i in 1:length(cov_mats$Name)){
print(cov_mats$Name[cov_i])
pb <- progress_bar$new(total = nrow(Z_oos))
for(i in 1:nrow(Z_oos)){
pb$tick()
if(cov_mats$Name[cov_i]=="True"){
cov_temp <- PowExp(R,params = list(sigma=1,theta=theta_fn(x_oos[i]),gamma=1))
}else if(cov_mats$Name[cov_i]=="Static Empirical"){
cov_temp <- cov(Z)
}else if(cov_mats$Name[cov_i]=="GAC-Linear"){
cov_temp <- PowExp(R,params = list(sigma=1,theta=theta_fn_linear_pred(x_oos[i]),gamma=1))
}else if(cov_mats$Name[cov_i]=="GAC-CR"){
cov_temp <- PowExp(R,params = list(sigma=1,theta=theta_fn_smooth_pred(x_oos[i]),gamma=1))
}else{
stop("cov_i not recognised.")
}
## Quick scores to calculate
# log score
scores[index==i & Name==cov_mats$Name[[cov_i]], ls := -log(mvnfast::dmvn(X = Z_oos[i,],mu = rep(0,ncol(R)),sigma = cov_temp))]
# Entropy
scores[index==i & Name==cov_mats$Name[[cov_i]], entropy :=
cov_entropy(R_true = PowExp(R,params = list(sigma=1,theta=theta_fn(x_oos[i]),gamma=1)),
R_est = cov_temp)]
## Slow scores to calculate (comment out to save time...)
# # Draw sample trajectories
# traj <- mvnfast::rmvn(n = N,
#                       mu=rep(0,ncol(R)),sigma = cov_temp)
#
# # es and vs
# scores[index==i & Name==cov_mats$Name[[cov_i]], es := es_sample(y=Z_oos[i,],dat = t(traj))]
# scores[index==i & Name==cov_mats$Name[[cov_i]], vs_0_5 := vs_sample_quick(y=Z_oos[i,],dat = t(traj), p = 0.5)]
# scores[index==i & Name==cov_mats$Name[[cov_i]], vs_1 := vs_sample_quick(y=Z_oos[i,],dat = t(traj), p = 1)]
}
}
rm(cov_temp)
print(setorder(scores[,mean(ls),by="Name"],V1))
print(setorder(scores[,mean(entropy),by="Name"],V1))
iso_ex_linear_fit
iso_ex_static_fit
iso_ex_smooth_fit
## GAC fit for theta
iso_ex_smooth_fit <- gac(R = R,
X = list(x1=x),
Emp_Cov = NULL,
data = Z,
cov_func = PowExp_1param,
param_eqns = list(~s(x1,bs="cr",k=5)),
loss="WLS",smoothness_param = 5e-5)
hist(x)
# Plot Basis Functions
matplot(x=iso_ex_smooth_fit$modelling_table$x1,
y=iso_ex_smooth_fit$gam_prefits[[1]]$X,type="l")
# Plot Smooth Fit
matplot(x=iso_ex_smooth_fit$modelling_table$x1,
y=iso_ex_smooth_fit$gam_prefits[[1]]$X *
matrix(rep(iso_ex_smooth_fit$gac_coef[[1]],each=nrow(iso_ex_smooth_fit$gam_prefits[[1]]$X)),
ncol=ncol(iso_ex_smooth_fit$gam_prefits[[1]]$X)),
type="l")
lines(iso_ex_smooth_fit$modelling_table$x1,
iso_ex_smooth_fit$gam_prefits[[1]]$X %*% iso_ex_smooth_fit$gac_coef[[1]],col=3)
## Plot different estimates of theta_fn:
plot(x[order(x)],theta_fn(x)[order(x)],type="l",ylim=c(1,4))
lines(iso_ex_linear_fit$modelling_table$x1,
iso_ex_linear_fit$gam_prefits[[1]]$X %*% iso_ex_linear_fit$gac_coef[[1]],col=2,lty=2)
lines(iso_ex_smooth_fit$modelling_table$x1,
iso_ex_smooth_fit$gam_prefits[[1]]$X %*% iso_ex_smooth_fit$gac_coef[[1]],col=3,lty=3)
## Predict function for fits
theta_fn_linear_pred <- approxfun(x = iso_ex_linear_fit$modelling_table$x1,
y = iso_ex_linear_fit$gam_prefits[[1]]$X %*% iso_ex_linear_fit$gac_coef[[1]],
rule = 2)
theta_fn_smooth_pred <- approxfun(x = iso_ex_smooth_fit$modelling_table$x1,
y = iso_ex_smooth_fit$gam_prefits[[1]]$X %*% iso_ex_smooth_fit$gac_coef[[1]],
rule = 2)
## Realisations
N_oos <- N
x_oos <- runif(N_oos)
# Empirical from simulation
Z_oos <- matrix(NA,N_oos,ncol(R))
for(i in 1:N_oos){
Z_oos[i,] <- mvnfast::rmvn(n = 1,
mu=rep(0,ncol(R)),sigma = PowExp(R,params = list(sigma=1,theta=theta_fn(x_oos[i]),gamma=1)))
}
cov_mats <- list(Name=c("True","Static Empirical","GAC-Linear","GAC-CR"))
scores <- data.table(index=rep(1:nrow(Z_oos),length(cov_mats$Name)),
Name=rep(cov_mats$Name,each=nrow(Z_oos)))
for(cov_i in 1:length(cov_mats$Name)){
print(cov_mats$Name[cov_i])
pb <- progress_bar$new(total = nrow(Z_oos))
for(i in 1:nrow(Z_oos)){
pb$tick()
if(cov_mats$Name[cov_i]=="True"){
cov_temp <- PowExp(R,params = list(sigma=1,theta=theta_fn(x_oos[i]),gamma=1))
}else if(cov_mats$Name[cov_i]=="Static Empirical"){
cov_temp <- cov(Z)
}else if(cov_mats$Name[cov_i]=="GAC-Linear"){
cov_temp <- PowExp(R,params = list(sigma=1,theta=theta_fn_linear_pred(x_oos[i]),gamma=1))
}else if(cov_mats$Name[cov_i]=="GAC-CR"){
cov_temp <- PowExp(R,params = list(sigma=1,theta=theta_fn_smooth_pred(x_oos[i]),gamma=1))
}else{
stop("cov_i not recognised.")
}
## Quick scores to calculate
# log score
scores[index==i & Name==cov_mats$Name[[cov_i]], ls := -log(mvnfast::dmvn(X = Z_oos[i,],mu = rep(0,ncol(R)),sigma = cov_temp))]
# Entropy
scores[index==i & Name==cov_mats$Name[[cov_i]], entropy :=
cov_entropy(R_true = PowExp(R,params = list(sigma=1,theta=theta_fn(x_oos[i]),gamma=1)),
R_est = cov_temp)]
## Slow scores to calculate (comment out to save time...)
# # Draw sample trajectories
# traj <- mvnfast::rmvn(n = N,
#                       mu=rep(0,ncol(R)),sigma = cov_temp)
#
# # es and vs
# scores[index==i & Name==cov_mats$Name[[cov_i]], es := es_sample(y=Z_oos[i,],dat = t(traj))]
# scores[index==i & Name==cov_mats$Name[[cov_i]], vs_0_5 := vs_sample_quick(y=Z_oos[i,],dat = t(traj), p = 0.5)]
# scores[index==i & Name==cov_mats$Name[[cov_i]], vs_1 := vs_sample_quick(y=Z_oos[i,],dat = t(traj), p = 1)]
}
}
rm(cov_temp)
print(setorder(scores[,mean(ls),by="Name"],V1))
print(setorder(scores[,mean(entropy),by="Name"],V1))
iso_ex_linear_fit$modelling_table$x1
## Plot different estimates of theta_fn:
plot(x[order(x)],theta_fn(x)[order(x)],type="l",ylim=c(1,4),box=F)
## Plot different estimates of theta_fn:
plot(x[order(x)],theta_fn(x)[order(x)],type="l",ylim=c(1,4),axes=F)
lines(iso_ex_linear_fit$modelling_table$x1,
iso_ex_linear_fit$gam_prefits[[1]]$X %*% iso_ex_linear_fit$gac_coef[[1]],col=2,lty=2)
lines(iso_ex_smooth_fit$modelling_table$x1,
iso_ex_smooth_fit$gam_prefits[[1]]$X %*% iso_ex_smooth_fit$gac_coef[[1]],col=3,lty=3)
## Plot different estimates of theta_fn:
plot(x[order(x)],theta_fn(x)[order(x)],type="l",ylim=c(1,4),axes=F,
xlab="x",ylab="Theta",font="serif")
## Plot different estimates of theta_fn:
plot(x[order(x)],theta_fn(x)[order(x)],type="l",ylim=c(1,4),axes=F,
xlab="x",ylab="Theta",family="serif")
lines(iso_ex_linear_fit$modelling_table$x1,
iso_ex_linear_fit$gam_prefits[[1]]$X %*% iso_ex_linear_fit$gac_coef[[1]],col=2,lty=2)
lines(iso_ex_smooth_fit$modelling_table$x1,
iso_ex_smooth_fit$gam_prefits[[1]]$X %*% iso_ex_smooth_fit$gac_coef[[1]],col=3,lty=3)
axis(1);axis(2)
## Plot different estimates of theta_fn:
plot(x[order(x)],theta_fn(x)[order(x)],type="l",ylim=c(1,4),axes=F,
xlab="x",ylab="Theta",family="serif")
axis(1);axis(2); grid()
lines(iso_ex_linear_fit$modelling_table$x1,
iso_ex_linear_fit$gam_prefits[[1]]$X %*% iso_ex_linear_fit$gac_coef[[1]],col=2,lty=2)
lines(iso_ex_smooth_fit$modelling_table$x1,
iso_ex_smooth_fit$gam_prefits[[1]]$X %*% iso_ex_smooth_fit$gac_coef[[1]],col=3,lty=3)
## Plot different estimates of theta_fn:
plot(x[order(x)],theta_fn(x)[order(x)],type="l",ylim=c(1,4),axes=F,
xlab=expression(x),ylab="Theta",family="serif")
## Plot different estimates of theta_fn:
plot(x[order(x)],theta_fn(x)[order(x)],type="l",ylim=c(1,4),axes=F,
xlab=expression("x"),ylab="Theta",family="serif")
## Plot different estimates of theta_fn:
plot(x[order(x)],theta_fn(x)[order(x)],type="l",ylim=c(1,4),axes=F,
xlab=expression("x"),ylab=expression(theta),family="serif")
## Plot different estimates of theta_fn:
plot(x[order(x)],theta_fn(x)[order(x)],type="l",ylim=c(1,4),axes=F,
xlab=expression(x_t),ylab=expression(theta),family="serif")
install.packages()
install.packages("latex2exp")
## Plot different estimates of theta_fn:
require(latex2exp)
plot(x[order(x)],theta_fn(x)[order(x)],type="l",ylim=c(1,4),axes=F,
xlab=TeX("x_t"),ylab=expression(theta),family="serif")
plot(x[order(x)],theta_fn(x)[order(x)],type="l",ylim=c(1,4),axes=F,
xlab=TeX("x_t"),ylab=TeX("\theta"),family="serif")
plot(x[order(x)],theta_fn(x)[order(x)],type="l",ylim=c(1,4),axes=F,
xlab=TeX("x_t"),ylab=TeX("\\theta"),family="serif")
plot(x[order(x)],theta_fn(x)[order(x)],type="l",ylim=c(1,4),axes=F,
xlab=TeX("x_t"),ylab=TeX("theta"),family="serif")
plot(x[order(x)],theta_fn(x)[order(x)],type="l",ylim=c(1,4),axes=F,
xlab=TeX("$x_t$"),ylab=TeX("$\theta$"),family="serif")
plot(x[order(x)],theta_fn(x)[order(x)],type="l",ylim=c(1,4),axes=F,
xlab=TeX("$x_t$"),ylab=TeX("$\\theta$"),family="serif")
axis(1);axis(2); grid()
lines(iso_ex_linear_fit$modelling_table$x1,
iso_ex_linear_fit$gam_prefits[[1]]$X %*% iso_ex_linear_fit$gac_coef[[1]],col=2,lty=2)
lines(iso_ex_smooth_fit$modelling_table$x1,
iso_ex_smooth_fit$gam_prefits[[1]]$X %*% iso_ex_smooth_fit$gac_coef[[1]],col=3,lty=3)
plot(x[order(x)],theta_fn(x)[order(x)],type="l",ylim=c(1,4),axes=F,
xlab=TeX("$x_t$"),ylab=TeX("$\\hat{\\theta}$"),family="serif")
axis(1);axis(2); grid()
lines(iso_ex_linear_fit$modelling_table$x1,
iso_ex_linear_fit$gam_prefits[[1]]$X %*% iso_ex_linear_fit$gac_coef[[1]],col=2,lty=2)
lines(iso_ex_smooth_fit$modelling_table$x1,
iso_ex_smooth_fit$gam_prefits[[1]]$X %*% iso_ex_smooth_fit$gac_coef[[1]],col=3,lty=3)
legend("top",c("True","GAC-Linear","GAC-CR"),col=1:3,lty=1:3)
legend("top",c("True","GAC-Linear","GAC-CR"),col=1:3,lty=1:3,family="serif")
plot(x[order(x)],theta_fn(x)[order(x)],type="l",ylim=c(1,4),axes=F,
xlab=TeX("$x_t$"),ylab=TeX("$\\hat{\\theta}$"))
axis(1);axis(2); grid()
lines(iso_ex_linear_fit$modelling_table$x1,
iso_ex_linear_fit$gam_prefits[[1]]$X %*% iso_ex_linear_fit$gac_coef[[1]],col=2,lty=2)
lines(iso_ex_smooth_fit$modelling_table$x1,
iso_ex_smooth_fit$gam_prefits[[1]]$X %*% iso_ex_smooth_fit$gac_coef[[1]],col=3,lty=3)
legend("top",c("True","GAC-Linear","GAC-CR"),col=1:3,lty=1:3,text.font = "serif")
?legend
par(family="serif")
plot(x[order(x)],theta_fn(x)[order(x)],type="l",ylim=c(1,4),axes=F,
xlab=TeX("$x_t$"),ylab=TeX("$\\hat{\\theta}$"))
axis(1);axis(2); grid()
lines(iso_ex_linear_fit$modelling_table$x1,
iso_ex_linear_fit$gam_prefits[[1]]$X %*% iso_ex_linear_fit$gac_coef[[1]],col=2,lty=2)
lines(iso_ex_smooth_fit$modelling_table$x1,
iso_ex_smooth_fit$gam_prefits[[1]]$X %*% iso_ex_smooth_fit$gac_coef[[1]],col=3,lty=3)
legend("top",c("True","GAC-Linear","GAC-CR"),col=1:3,lty=1:3,text.font = "serif")
legend("top",c("True","GAC-Linear","GAC-CR"),col=1:3,lty=1:3)
par(family="serif",mar=c(4.5, 4.5, .1, .1))
plot(x[order(x)],theta_fn(x)[order(x)],type="l",ylim=c(1,4),axes=F,
xlab=TeX("$x_t$"),ylab=TeX("$\\hat{\\theta}$"))
axis(1);axis(2); grid()
lines(iso_ex_linear_fit$modelling_table$x1,
iso_ex_linear_fit$gam_prefits[[1]]$X %*% iso_ex_linear_fit$gac_coef[[1]],col=2,lty=2)
lines(iso_ex_smooth_fit$modelling_table$x1,
iso_ex_smooth_fit$gam_prefits[[1]]$X %*% iso_ex_smooth_fit$gac_coef[[1]],col=3,lty=3)
legend("top",c("True","GAC-Linear","GAC-CR"),col=1:3,lty=1:3)
setEPS(); postscript("PSCC22_plots/iso_theta_fits.eps")
plot(x[order(x)],theta_fn(x)[order(x)],type="l",ylim=c(1,4),axes=F,
xlab=TeX("$x_t$"),ylab=TeX("$\\hat{\\theta}$"))
axis(1);axis(2); grid()
lines(iso_ex_linear_fit$modelling_table$x1,
iso_ex_linear_fit$gam_prefits[[1]]$X %*% iso_ex_linear_fit$gac_coef[[1]],col=2,lty=2)
lines(iso_ex_smooth_fit$modelling_table$x1,
iso_ex_smooth_fit$gam_prefits[[1]]$X %*% iso_ex_smooth_fit$gac_coef[[1]],col=3,lty=3)
legend("top",c("True","GAC-Linear","GAC-CR"),col=1:3,lty=1:3)
dev.off()
?postscript
setEPS(); postscript("PSCC22_plots/iso_theta_fits.eps",width = 6,height = 4)
plot(x[order(x)],theta_fn(x)[order(x)],type="l",ylim=c(1,4),axes=F,
xlab=TeX("$x_t$"),ylab=TeX("$\\hat{\\theta}$"))
axis(1);axis(2); grid()
lines(iso_ex_linear_fit$modelling_table$x1,
iso_ex_linear_fit$gam_prefits[[1]]$X %*% iso_ex_linear_fit$gac_coef[[1]],col=2,lty=2)
lines(iso_ex_smooth_fit$modelling_table$x1,
iso_ex_smooth_fit$gam_prefits[[1]]$X %*% iso_ex_smooth_fit$gac_coef[[1]],col=3,lty=3)
legend("top",c("True","GAC-Linear","GAC-CR"),col=1:3,lty=1:3)
dev.off()
setEPS(); postscript("PSCC22_plots/iso_theta_fits.eps",width = 6,height = 5,paper="special")
plot(x[order(x)],theta_fn(x)[order(x)],type="l",ylim=c(1,4),axes=F,
xlab=TeX("$x_t$"),ylab=TeX("$\\hat{\\theta}$"))
axis(1);axis(2); grid()
lines(iso_ex_linear_fit$modelling_table$x1,
iso_ex_linear_fit$gam_prefits[[1]]$X %*% iso_ex_linear_fit$gac_coef[[1]],col=2,lty=2)
lines(iso_ex_smooth_fit$modelling_table$x1,
iso_ex_smooth_fit$gam_prefits[[1]]$X %*% iso_ex_smooth_fit$gac_coef[[1]],col=3,lty=3)
legend("top",c("True","GAC-Linear","GAC-CR"),col=1:3,lty=1:3)
dev.off()
plot(x[order(x)],theta_fn(x)[order(x)],type="l", lwd=2,
ylim=c(1,4),axes=F,
xlab=TeX("$x_t$"),ylab=TeX("$\\hat{\\theta}$"))
axis(1);axis(2); grid()
lines(iso_ex_linear_fit$modelling_table$x1,
iso_ex_linear_fit$gam_prefits[[1]]$X %*% iso_ex_linear_fit$gac_coef[[1]],col=2,lty=2,lwd=2)
lines(iso_ex_smooth_fit$modelling_table$x1,
iso_ex_smooth_fit$gam_prefits[[1]]$X %*% iso_ex_smooth_fit$gac_coef[[1]],col=3,lty=3,lwd=2)
legend("top",c("True","GAC-Linear","GAC-CR"),col=1:3,lty=1:3)
legend("top",c("True","GAC-Linear","GAC-CR"),col=1:3,lty=1:3,lwd=2)
setEPS(); postscript("PSCC22_plots/iso_theta_fits.eps",paper="us")#width = 6,height = 5,paper="special")
plot(x[order(x)],theta_fn(x)[order(x)],type="l", lwd=2,
ylim=c(1,4),axes=F,
xlab=TeX("$x_t$"),ylab=TeX("$\\hat{\\theta}$"))
axis(1);axis(2); grid()
lines(iso_ex_linear_fit$modelling_table$x1,
iso_ex_linear_fit$gam_prefits[[1]]$X %*% iso_ex_linear_fit$gac_coef[[1]],col=2,lty=2,lwd=2)
lines(iso_ex_smooth_fit$modelling_table$x1,
iso_ex_smooth_fit$gam_prefits[[1]]$X %*% iso_ex_smooth_fit$gac_coef[[1]],col=3,lty=3,lwd=2)
legend("top",c("True","GAC-Linear","GAC-CR"),col=1:3,lty=1:3,lwd=2)
dev.off()
?setEPS
?postscript
par(family="serif",mar=c(4.5, 4.5, .1, .1), xaxs = "i", yaxs = "i")
plot(x[order(x)],theta_fn(x)[order(x)],type="l", lwd=2,
ylim=c(1,4),axes=F,
xlab=TeX("$x_t$"),ylab=TeX("$\\hat{\\theta}$"))
axis(1);axis(2); grid()
lines(iso_ex_linear_fit$modelling_table$x1,
iso_ex_linear_fit$gam_prefits[[1]]$X %*% iso_ex_linear_fit$gac_coef[[1]],col=2,lty=2,lwd=2)
par(family="serif",mar=c(4.5, 4.5, .1, .1), xaxs = "r", yaxs = "r")
plot(x[order(x)],theta_fn(x)[order(x)],type="l", lwd=2,
ylim=c(1,4),axes=F,
xlab=TeX("$x_t$"),ylab=TeX("$\\hat{\\theta}$"))
axis(1);axis(2); grid()
lines(iso_ex_linear_fit$modelling_table$x1,
iso_ex_linear_fit$gam_prefits[[1]]$X %*% iso_ex_linear_fit$gac_coef[[1]],col=2,lty=2,lwd=2)
lines(iso_ex_smooth_fit$modelling_table$x1,
iso_ex_smooth_fit$gam_prefits[[1]]$X %*% iso_ex_smooth_fit$gac_coef[[1]],col=3,lty=3,lwd=2)
legend("top",c("True","GAC-Linear","GAC-CR"),col=1:3,lty=1:3,lwd=2)
setEPS(); postscript("PSCC22_plots/iso_theta_fits.eps",width = 6,height = 5)
plot(x[order(x)],theta_fn(x)[order(x)],type="l", lwd=2,
ylim=c(1,4),axes=F,
xlab=TeX("$x_t$"),ylab=TeX("$\\hat{\\theta}$"))
axis(1);axis(2); grid()
lines(iso_ex_linear_fit$modelling_table$x1,
iso_ex_linear_fit$gam_prefits[[1]]$X %*% iso_ex_linear_fit$gac_coef[[1]],col=2,lty=2,lwd=2)
lines(iso_ex_smooth_fit$modelling_table$x1,
iso_ex_smooth_fit$gam_prefits[[1]]$X %*% iso_ex_smooth_fit$gac_coef[[1]],col=3,lty=3,lwd=2)
legend("top",c("True","GAC-Linear","GAC-CR"),col=1:3,lty=1:3,lwd=2)
dev.off()
setEPS(); postscript("PSCC22_plots/iso_theta_fits.eps",width = 6,height = 5)
plot(x[order(x)],theta_fn(x)[order(x)],type="l", lwd=2,
ylim=c(1,4),axes=F,
xlab=TeX("$x_t$"),ylab=TeX("$\\hat{\\theta}$"))
axis(1);axis(2); grid()
lines(iso_ex_linear_fit$modelling_table$x1,
iso_ex_linear_fit$gam_prefits[[1]]$X %*% iso_ex_linear_fit$gac_coef[[1]],col=2,lty=2,lwd=2)
lines(iso_ex_smooth_fit$modelling_table$x1,
iso_ex_smooth_fit$gam_prefits[[1]]$X %*% iso_ex_smooth_fit$gac_coef[[1]],col=3,lty=3,lwd=2)
legend("top",c("True","GAC-Linear","GAC-CR"),col=1:3,lty=1:3,lwd=2)
dev.off()
?s
# Plot Smooth Fit
matplot(x=iso_ex_smooth_fit$modelling_table$x1,
y=iso_ex_smooth_fit$gam_prefits[[1]]$X *
matrix(rep(iso_ex_smooth_fit$gac_coef[[1]],each=nrow(iso_ex_smooth_fit$gam_prefits[[1]]$X)),
ncol=ncol(iso_ex_smooth_fit$gam_prefits[[1]]$X)),
type="l")
# Plot Basis Functions
matplot(x=iso_ex_smooth_fit$modelling_table$x1,
y=iso_ex_smooth_fit$gam_prefits[[1]]$X,type="l")
iso_ex_static_fit
iso_ex_linear_fit
# Empirical from simulation
Z_oos <- matrix(NA,N_oos,ncol(R))
for(i in 1:N_oos){
Z_oos[i,] <- mvnfast::rmvn(n = 1,
mu=rep(0,ncol(R)),sigma = PowExp(R,params = list(sigma=1,theta=theta_fn(x_oos[i]),gamma=1)))
}
cov_mats <- list(Name=c("True","Static Empirical","GAC-Linear","GAC-CR"))
scores <- data.table(index=rep(1:nrow(Z_oos),length(cov_mats$Name)),
Name=rep(cov_mats$Name,each=nrow(Z_oos)))
for(cov_i in 1:length(cov_mats$Name)){
print(cov_mats$Name[cov_i])
pb <- progress_bar$new(total = nrow(Z_oos))
for(i in 1:nrow(Z_oos)){
pb$tick()
if(cov_mats$Name[cov_i]=="True"){
cov_temp <- PowExp(R,params = list(sigma=1,theta=theta_fn(x_oos[i]),gamma=1))
}else if(cov_mats$Name[cov_i]=="Static Empirical"){
cov_temp <- cov(Z)
}else if(cov_mats$Name[cov_i]=="GAC-Linear"){
cov_temp <- PowExp(R,params = list(sigma=1,theta=theta_fn_linear_pred(x_oos[i]),gamma=1))
}else if(cov_mats$Name[cov_i]=="GAC-CR"){
cov_temp <- PowExp(R,params = list(sigma=1,theta=theta_fn_smooth_pred(x_oos[i]),gamma=1))
}else{
stop("cov_i not recognised.")
}
## Quick scores to calculate
# log score
scores[index==i & Name==cov_mats$Name[[cov_i]], ls := -log(mvnfast::dmvn(X = Z_oos[i,],mu = rep(0,ncol(R)),sigma = cov_temp))]
# Entropy
scores[index==i & Name==cov_mats$Name[[cov_i]], entropy :=
cov_entropy(R_true = PowExp(R,params = list(sigma=1,theta=theta_fn(x_oos[i]),gamma=1)),
R_est = cov_temp)]
## Slow scores to calculate (comment out to save time...)
# Draw sample trajectories
traj <- mvnfast::rmvn(n = 1000,
mu=rep(0,ncol(R)),sigma = cov_temp)
# es and vs
scores[index==i & Name==cov_mats$Name[[cov_i]], es := es_sample(y=Z_oos[i,],dat = t(traj))]
scores[index==i & Name==cov_mats$Name[[cov_i]], vs_0_5 := vs_sample_quick(y=Z_oos[i,],dat = t(traj), p = 0.5)]
scores[index==i & Name==cov_mats$Name[[cov_i]], vs_1 := vs_sample_quick(y=Z_oos[i,],dat = t(traj), p = 1)]
}
}
rm(cov_temp)
print(setorder(scores[,mean(es),by="Name"],V1))
print(setorder(scores[,mean(vs_0_5),by="Name"],V1))
print(setorder(scores[,mean(vs_1),by="Name"],V1))
print(setorder(scores[,mean(ls),by="Name"],V1))
print(setorder(scores[,mean(entropy),by="Name"],V1))
print(xtable(scores[,.(`Energy`=signif(mean(es),4),
`Log`=signif(mean(ls),4),
`VS-0.5`=signif(mean(vs_0_5),4),
`VS-1`=signif(mean(vs_1),4),
KL = signif(mean(entropy),4)),
by="Name"][order(-Log),],digits = 3,
caption = c("Results of simulation experiment for example \\ref{sec:iso_dyn_cov}: Isotropic dynamic covariance."),
label = c("tab:iso_dyn_cov")),
caption.placement = "top",table.placement="",
include.rownames=F)
scores
## Save/load results
save.image(file="PSCC22_plots/iso_example.Rda")
