}
cov_mats$Name[cov_i]=="True"
for(cov_i in 1:length(cov_mats$Name)){
for(i in 1:nrow(Z_oos)){
if(cov_mats$Name[cov_i]=="True"){
cov_temp <- PowExp(R,params = list(sigma=1,theta=theta_fn(x_oos[i]),gamma=1))
}else if(cov_mats$Name[cov_i]=="Static Empirical"){
cov_temp <- cov(Z)
}if(cov_mats$Name[cov_i]=="GAC"){
cov_temp <- PowExp(R,params = list(sigma=1,theta=theta_fn_smooth_pred(x_oos[i]),gamma=1))
}else{
stop("cov_i not recognised.")
}
# Draw sample trajectories
traj <- mvnfast::rmvn(n = 1000,
mu=rep(0,ncol(R)),sigma = cov_temp)
# es and vs
scores[index==i & Name==cov_mats$Name[[cov_i]], es := es_sample(y=Z_oos[i,],dat = t(traj))]
scores[index==i & Name==cov_mats$Name[[cov_i]], vs_0_5 := vs_sample_quick(y=Z_oos[i,],dat = t(traj), p = 0.5)]
scores[index==i & Name==cov_mats$Name[[cov_i]], vs_1 := vs_sample_quick(y=Z_oos[i,],dat = t(traj), p = 1)]
# log score
scores[index==i & Name==cov_mats$Name[[cov_i]], ls := -log(mvnfast::dmvn(X = Z_oos[i,],mu = rep(0,ncol(actuals)),sigma = cov_temp))]
# Entropy
cov_entropy(R_true = PowExp(R,params = list(sigma=1,theta=theta_fn(x_oos[i]),gamma=1)),
R_est = cov_temp)
}
}
# Realisations
N_oos <- 1
x_oos <- runif(N_oos)
# Empirical from simulation
Z_oos <- matrix(NA,N_oos,ncol(R))
for(i in 1:N_oos){
Z_oos[i,] <- mvnfast::rmvn(n = 1,
mu=rep(0,ncol(R)),sigma = PowExp(R,params = list(sigma=1,theta=theta_fn(x_oos[i]),gamma=1)))
}
cov_mats <- list(Name=c("True","Static Empirical","GAC"))
cov_mats
scores <- data.table(index=rep(1:nrow(Z_oos),length(cov_mats$Name)),
Name=rep(cov_mats$Name,each=nrow(Z_oos)))
for(cov_i in 1:length(cov_mats$Name)){}
cov_i
i in 1:nrow(Z_oos)
cov_mats$Name[cov_i]=="True"
cov_mats$Name[cov_i]=="GAC"
if(cov_mats$Name[cov_i]=="True"){
cov_temp <- PowExp(R,params = list(sigma=1,theta=theta_fn(x_oos[i]),gamma=1))
}else if(cov_mats$Name[cov_i]=="Static Empirical"){
cov_temp <- cov(Z)
}if(cov_mats$Name[cov_i]=="GAC"){
cov_temp <- PowExp(R,params = list(sigma=1,theta=theta_fn_smooth_pred(x_oos[i]),gamma=1))
}else{
stop("cov_i not recognised.")
}
for(cov_i in 1:length(cov_mats$Name)){
for(i in 1:nrow(Z_oos)){
if(cov_mats$Name[cov_i]=="True"){
cov_temp <- PowExp(R,params = list(sigma=1,theta=theta_fn(x_oos[i]),gamma=1))
}else if(cov_mats$Name[cov_i]=="Static Empirical"){
cov_temp <- cov(Z)
}else if(cov_mats$Name[cov_i]=="GAC"){
cov_temp <- PowExp(R,params = list(sigma=1,theta=theta_fn_smooth_pred(x_oos[i]),gamma=1))
}else{
stop("cov_i not recognised.")
}
# Draw sample trajectories
traj <- mvnfast::rmvn(n = 1000,
mu=rep(0,ncol(R)),sigma = cov_temp)
# es and vs
scores[index==i & Name==cov_mats$Name[[cov_i]], es := es_sample(y=Z_oos[i,],dat = t(traj))]
scores[index==i & Name==cov_mats$Name[[cov_i]], vs_0_5 := vs_sample_quick(y=Z_oos[i,],dat = t(traj), p = 0.5)]
scores[index==i & Name==cov_mats$Name[[cov_i]], vs_1 := vs_sample_quick(y=Z_oos[i,],dat = t(traj), p = 1)]
# log score
scores[index==i & Name==cov_mats$Name[[cov_i]], ls := -log(mvnfast::dmvn(X = Z_oos[i,],mu = rep(0,ncol(actuals)),sigma = cov_temp))]
# Entropy
cov_entropy(R_true = PowExp(R,params = list(sigma=1,theta=theta_fn(x_oos[i]),gamma=1)),
R_est = cov_temp)
}
}
require(scoringRules)
for(cov_i in 1:length(cov_mats$Name)){
for(i in 1:nrow(Z_oos)){
if(cov_mats$Name[cov_i]=="True"){
cov_temp <- PowExp(R,params = list(sigma=1,theta=theta_fn(x_oos[i]),gamma=1))
}else if(cov_mats$Name[cov_i]=="Static Empirical"){
cov_temp <- cov(Z)
}else if(cov_mats$Name[cov_i]=="GAC"){
cov_temp <- PowExp(R,params = list(sigma=1,theta=theta_fn_smooth_pred(x_oos[i]),gamma=1))
}else{
stop("cov_i not recognised.")
}
# Draw sample trajectories
traj <- mvnfast::rmvn(n = 1000,
mu=rep(0,ncol(R)),sigma = cov_temp)
# es and vs
scores[index==i & Name==cov_mats$Name[[cov_i]], es := es_sample(y=Z_oos[i,],dat = t(traj))]
scores[index==i & Name==cov_mats$Name[[cov_i]], vs_0_5 := vs_sample_quick(y=Z_oos[i,],dat = t(traj), p = 0.5)]
scores[index==i & Name==cov_mats$Name[[cov_i]], vs_1 := vs_sample_quick(y=Z_oos[i,],dat = t(traj), p = 1)]
# log score
scores[index==i & Name==cov_mats$Name[[cov_i]], ls := -log(mvnfast::dmvn(X = Z_oos[i,],mu = rep(0,ncol(actuals)),sigma = cov_temp))]
# Entropy
scores[index==i & Name==cov_mats$Name[[cov_i]], entropy :=
cov_entropy(R_true = PowExp(R,params = list(sigma=1,theta=theta_fn(x_oos[i]),gamma=1)),
R_est = cov_temp)]
}
}
for(cov_i in 1:length(cov_mats$Name)){
for(i in 1:nrow(Z_oos)){
if(cov_mats$Name[cov_i]=="True"){
cov_temp <- PowExp(R,params = list(sigma=1,theta=theta_fn(x_oos[i]),gamma=1))
}else if(cov_mats$Name[cov_i]=="Static Empirical"){
cov_temp <- cov(Z)
}else if(cov_mats$Name[cov_i]=="GAC"){
cov_temp <- PowExp(R,params = list(sigma=1,theta=theta_fn_smooth_pred(x_oos[i]),gamma=1))
}else{
stop("cov_i not recognised.")
}
# Draw sample trajectories
traj <- mvnfast::rmvn(n = 1000,
mu=rep(0,ncol(R)),sigma = cov_temp)
# es and vs
scores[index==i & Name==cov_mats$Name[[cov_i]], es := es_sample(y=Z_oos[i,],dat = t(traj))]
scores[index==i & Name==cov_mats$Name[[cov_i]], vs_0_5 := vs_sample_quick(y=Z_oos[i,],dat = t(traj), p = 0.5)]
scores[index==i & Name==cov_mats$Name[[cov_i]], vs_1 := vs_sample_quick(y=Z_oos[i,],dat = t(traj), p = 1)]
# log score
scores[index==i & Name==cov_mats$Name[[cov_i]], ls := -log(mvnfast::dmvn(X = Z_oos[i,],mu = rep(0,ncol(R)),sigma = cov_temp))]
# Entropy
scores[index==i & Name==cov_mats$Name[[cov_i]], entropy :=
cov_entropy(R_true = PowExp(R,params = list(sigma=1,theta=theta_fn(x_oos[i]),gamma=1)),
R_est = cov_temp)]
}
}
rm(cov_temp)
print(setorder(scores[,mean(es),by="Name"],V1))
# Realisations
N_oos <- 1000
x_oos <- runif(N_oos)
# Empirical from simulation
Z_oos <- matrix(NA,N_oos,ncol(R))
for(i in 1:N_oos){
Z_oos[i,] <- mvnfast::rmvn(n = 1,
mu=rep(0,ncol(R)),sigma = PowExp(R,params = list(sigma=1,theta=theta_fn(x_oos[i]),gamma=1)))
}
cov_mats <- list(Name=c("True","Static Empirical","GAC"))
scores <- data.table(index=rep(1:nrow(Z_oos),length(cov_mats$Name)),
Name=rep(cov_mats$Name,each=nrow(Z_oos)))
for(cov_i in 1:length(cov_mats$Name)){
for(i in 1:nrow(Z_oos)){
if(cov_mats$Name[cov_i]=="True"){
cov_temp <- PowExp(R,params = list(sigma=1,theta=theta_fn(x_oos[i]),gamma=1))
}else if(cov_mats$Name[cov_i]=="Static Empirical"){
cov_temp <- cov(Z)
}else if(cov_mats$Name[cov_i]=="GAC"){
cov_temp <- PowExp(R,params = list(sigma=1,theta=theta_fn_smooth_pred(x_oos[i]),gamma=1))
}else{
stop("cov_i not recognised.")
}
# Draw sample trajectories
traj <- mvnfast::rmvn(n = 1000,
mu=rep(0,ncol(R)),sigma = cov_temp)
# es and vs
scores[index==i & Name==cov_mats$Name[[cov_i]], es := es_sample(y=Z_oos[i,],dat = t(traj))]
scores[index==i & Name==cov_mats$Name[[cov_i]], vs_0_5 := vs_sample_quick(y=Z_oos[i,],dat = t(traj), p = 0.5)]
scores[index==i & Name==cov_mats$Name[[cov_i]], vs_1 := vs_sample_quick(y=Z_oos[i,],dat = t(traj), p = 1)]
# log score
scores[index==i & Name==cov_mats$Name[[cov_i]], ls := -log(mvnfast::dmvn(X = Z_oos[i,],mu = rep(0,ncol(R)),sigma = cov_temp))]
# Entropy
scores[index==i & Name==cov_mats$Name[[cov_i]], entropy :=
cov_entropy(R_true = PowExp(R,params = list(sigma=1,theta=theta_fn(x_oos[i]),gamma=1)),
R_est = cov_temp)]
}
}
rm(cov_temp)
print(setorder(scores[,mean(es),by="Name"],V1))
print(setorder(scores[,mean(vs_0_5),by="Name"],V1))
print(setorder(scores[,mean(vs_1),by="Name"],V1))
print(setorder(scores[,mean(entropy),by="Name"],V1))
require(xtable)
require(xtable)
scores[,`Log`=mean(ls),by="Name"]
scores[,.(`Log`=mean(ls)),by="Name"]
scores[,.(`MV Energy`=mean(es),
`Log`=mean(ls)),by="Name"]
scores[,.(`MV Energy`=mean(es),
`Log`=mean(ls),
`VS-0.5`=mean(vs_0_5),
`VS-1`=mean(vs_1)),by="Name"]
scores[,.(`MV Energy`=mean(es),
`Log`=mean(ls),
`VS-0.5`=mean(vs_0_5),
`VS-1`=mean(vs_1),
Entropy = mean(entropy)),by="Name"]
scores[,.(`MV Energy`=round(mean(es),3),
`Log`=mean(ls),
`VS-0.5`=mean(vs_0_5),
`VS-1`=mean(vs_1),
Entropy = mean(entropy)),by="Name"]
scores[,.(`MV Energy`=round(mean(es),3),
`Log`=round(mean(ls),3),
`VS-0.5`=round(mean(vs_0_5),3),
`VS-1`=round(mean(vs_1),3),
Entropy = mean(entropy)),by="Name"]
scores[,.(`MV Energy`=round(mean(es),3),
`Log`=round(mean(ls),3),
`VS-0.5`=round(mean(vs_0_5),3),
`VS-1`=round(mean(vs_1),3),
Entropy = round(mean(entropy),3)),by="Name"]
scores[,.(`Energy`=round(mean(es),3),
`Log`=round(mean(ls),3),
`VS-0.5`=round(mean(vs_0_5),3),
`VS-1`=round(mean(vs_1),3),
Entropy = round(mean(entropy),3)),by="Name"]
?xtable
xtable(scores[,.(`Energy`=round(mean(es),3),
`Log`=round(mean(ls),3),
`VS-0.5`=round(mean(vs_0_5),3),
`VS-1`=round(mean(vs_1),3),
Entropy = round(mean(entropy),3)),by="Name"])
print(xtable(scores[,.(`Energy`=round(mean(es),3),
`Log`=round(mean(ls),3),
`VS-0.5`=round(mean(vs_0_5),3),
`VS-1`=round(mean(vs_1),3),
Entropy = round(mean(entropy),3)),by="Name"]),include.rownames=F)
print(xtable(scores[,.(`Energy`=round(mean(es),3),
`Log`=round(mean(ls),3),
`VS-0.5`=round(mean(vs_0_5),3),
`VS-1`=round(mean(vs_1),3),
Entropy = round(mean(entropy),3)),by="Name"],digits = 2),
include.rownames=F)
print(xtable(scores[,.(`Energy`=mean(es),
`Log`=mean(ls),
`VS-0.5`=mean(vs_0_5),
`VS-1`=mean(vs_1),
Entropy = round(mean(entropy),3)),by="Name"],digits = 2),
include.rownames=F)
print(xtable(scores[,.(`Energy`=mean(es),
`Log`=mean(ls),
`VS-0.5`=mean(vs_0_5),
`VS-1`=mean(vs_1),
Entropy = round(mean(entropy),3)),by="Name"],digits = 3),
include.rownames=F)
print(xtable(scores[,.(`Energy`=mean(es),
`Log`=mean(ls),
`VS-0.5`=mean(vs_0_5),
`VS-1`=mean(vs_1),
Entropy = round(mean(entropy),3)),by="Name"][order(Log),],digits = 3),
include.rownames=F)
print(xtable(scores[,.(`Energy`=mean(es),
`Log`=mean(ls),
`VS-0.5`=mean(vs_0_5),
`VS-1`=mean(vs_1),
Entropy = round(mean(entropy),3)),by="Name"][order(-Log),],digits = 3),
include.rownames=F)
print(xtable(scores[,.(`Energy`=mean(es),
`Log`=mean(ls),
`VS-0.5`=mean(vs_0_5),
`VS-1`=mean(vs_1),
Entropy = round(mean(entropy),3)),
by="Name"][order(-Log),],digits = 3),
include.rownames=F)
?log
r <- seq(0,1,length.out=24)
R <- as.matrix(dist(r))
Z <- r %*% t(r) # NB: Cov is no longer a function of separation only...
image(t(Z))
# True Covariance (consider some addition structure not captured by model --- introdcue some mis-sepecification?)
Cov_R <- as.matrix(nearPD(PowExp(R,params = list(sigma=1,theta=2+1/(.1+sqrt(Z)),gamm=1)))$mat)
image(t(Cov_R))
# Empirical from simulation
data_sim <- mvnfast::rmvn(n = 720,
mu=rep(0,ncol(Cov_R)),sigma = Cov_R)
Cov_R_sim <- cov(data_sim)
image(t(Cov_R_sim))
modelling_table <- data.frame(y=c(Cov_R_sim),
r=c(R),
x1=c(Z))
plot(x=modelling_table$r,
y=modelling_table$y,
col=rgb(1-modelling_table$x1,0,modelling_table$x1))
test_static_fit <- gac(R = R,
X = list(x1=Z),
Emp_Cov = Cov_R_sim,
cov_func = PowExp,
param_eqns = list(~1,
~1,
~1),
loss="LS")
test_static_fit$gac_coef
## --- Test version using sample data
test_static_fit_data <- gac(R = R,
X = list(x1=Z),
Emp_Cov = NULL,
data=data_sim,
cov_func = PowExp,
param_eqns = list(~1,
~1,
~1),
loss="LS")
test_static_fit_data$gac_coef
image(t(test_static_fit_data$Cov_Est))
test_fit <- gac(R = R,
X = list(x1=Z),
Emp_Cov = Cov_R_sim,
cov_func = PowExp,
param_eqns = list(~1,
~s(x1,bs="bs"),
~1),
loss="WLSf",
smoothness_param = 1e-4)
image(t(test_fit$Cov_Est))
modelling_table$y_est <- c(test_fit$Cov_Est)
plot(x=modelling_table$r,
y=modelling_table$y_est,
col=rgb(1-modelling_table$x1,0,modelling_table$x1))
image(Cov_R_sim-nearPD(Cov_R_sim)$mat)
image(test_fit$Cov_Est-nearPD(test_fit$Cov_Est)$mat)
# Realisations
actuals <- mvnfast::rmvn(n = 1000,mu=rep(0,ncol(Cov_R)),sigma = Cov_R)
cov_mats <- list(Name=c("True","Empirical","Static","GAC"),
mat=list(Cov_R,
nearPD(Cov_R_sim)$mat,
nearPD(test_static_fit$Cov_Est)$mat,
nearPD(test_fit$Cov_Est)$mat))
scores <- data.table(index=rep(1:nrow(actuals),length(cov_mats$Name)),
Name=rep(cov_mats$Name,each=nrow(actuals)))
for(cov_i in 1:length(cov_mats$Name)){
for(i in 1:nrow(actuals)){
# Draw sample trajectories
traj <- mvnfast::rmvn(n = 1000,mu=rep(0,ncol(Cov_R)),sigma = cov_mats$mat[[cov_i]])
# es and vs
scores[index==i & Name==cov_mats$Name[[cov_i]], es := es_sample(y=actuals[i,],dat = t(traj))]
scores[index==i & Name==cov_mats$Name[[cov_i]], vs_0_5 := vs_sample_quick(y=actuals[i,],dat = t(traj), p = 0.5)]
scores[index==i & Name==cov_mats$Name[[cov_i]], vs_1 := vs_sample_quick(y=actuals[i,],dat = t(traj), p = 1)]
# log score
scores[index==i & Name==cov_mats$Name[[cov_i]], ls := -log(mvnfast::dmvn(X = actuals[i,],mu = rep(0,ncol(actuals)),sigma = cov_mats$mat[[cov_i]]))]
}
}
for(cov_i in 1:length(cov_mats$Name)){
for(i in 1:nrow(actuals)){
# Draw sample trajectories
traj <- mvnfast::rmvn(n = 1000,mu=rep(0,ncol(Cov_R)),sigma = cov_mats$mat[[cov_i]])
# es and vs
scores[index==i & Name==cov_mats$Name[[cov_i]], es := es_sample(y=actuals[i,],dat = t(traj))]
scores[index==i & Name==cov_mats$Name[[cov_i]], vs_0_5 := vs_sample_quick(y=actuals[i,],dat = t(traj), p = 0.5)]
scores[index==i & Name==cov_mats$Name[[cov_i]], vs_1 := vs_sample_quick(y=actuals[i,],dat = t(traj), p = 1)]
# log score
scores[index==i & Name==cov_mats$Name[[cov_i]], ls := -log(mvnfast::dmvn(X = actuals[i,],mu = rep(0,ncol(actuals)),sigma = cov_mats$mat[[cov_i]]))]
# Entropy
scores[index==i & Name==cov_mats$Name[[cov_i]], entropy :=
cov_entropy(R_true = Cov_R,R_est = cov_temp)]
}
}
for(cov_i in 1:length(cov_mats$Name)){
for(i in 1:nrow(actuals)){
# Draw sample trajectories
traj <- mvnfast::rmvn(n = 1000,mu=rep(0,ncol(Cov_R)),sigma = cov_mats$mat[[cov_i]])
# es and vs
scores[index==i & Name==cov_mats$Name[[cov_i]], es := es_sample(y=actuals[i,],dat = t(traj))]
scores[index==i & Name==cov_mats$Name[[cov_i]], vs_0_5 := vs_sample_quick(y=actuals[i,],dat = t(traj), p = 0.5)]
scores[index==i & Name==cov_mats$Name[[cov_i]], vs_1 := vs_sample_quick(y=actuals[i,],dat = t(traj), p = 1)]
# log score
scores[index==i & Name==cov_mats$Name[[cov_i]], ls := -log(mvnfast::dmvn(X = actuals[i,],mu = rep(0,ncol(actuals)),sigma = cov_mats$mat[[cov_i]]))]
# Entropy
scores[index==i & Name==cov_mats$Name[[cov_i]], entropy :=
cov_entropy(R_true = Cov_R,R_est = cov_mats$mat[[cov_i]])]
}
}
print(setorder(scores[,mean(es),by="Name"],V1))
print(xtable(scores[,.(`Energy`=mean(es),
`Log`=mean(ls),
`VS-0.5`=mean(vs_0_5),
`VS-1`=mean(vs_1),
Entropy = round(mean(entropy),3)),
by="Name"][order(-Log),],digits = 3),
include.rownames=F)
r <- seq(0,1,length.out=24)
R <- as.matrix(dist(r))
# Z <- r %*% t(r) # NB: Cov is no longer a function of separation only...
Z <- matrix(rep(1:N,N) + rep(1:N,each=N) - 1, N, N)/(2*N-1)
image(t(Z))
# True Covariance (consider some addition structure not captured by model --- introdcue some mis-sepecification?)
Cov_R <- as.matrix(nearPD(PowExp(R,params = list(sigma=1,theta=2+1/(.1+sqrt(Z)),gamm=1)))$mat)
r <- seq(0,1,length.out=24)
R <- as.matrix(dist(r))
# Z <- r %*% t(r) # NB: Cov is no longer a function of separation only...
Z <- matrix(rep(1:N,N) + rep(1:N,each=N) - 1, N, N)/(2*N-1)
image(t(Z))
# True Covariance (consider some addition structure not captured by model --- introdcue some mis-sepecification?)
Cov_R <- as.matrix(nearPD(PowExp(R,params = list(sigma=1,theta=2+1/(.1+sqrt(Z)),gamm=1)))$mat)
image(t(Cov_R))
Z <- matrix(rep(1:N,N) + rep(1:N,each=N) - 1, N, N)/(2*N-1)
image(t(Z))
Z <- matrix(rep(1:N,N) + rep(1:N,each=N) - 1, N, N)/(2*N-1)
rm(Z)
gc()
r <- seq(0,1,length.out=24)
R <- as.matrix(dist(r))
Z <- matrix(rep(1:N,N) + rep(1:N,each=N) - 1, N, N)/(2*N-1)
Cov_R <- as.matrix(nearPD(PowExp(R,params = list(sigma=1,theta=2+1/(.1+sqrt(Z)),gamm=1)))$mat)
Z
N <- length(R)
r <- seq(0,1,length.out=24)
R <- as.matrix(dist(r))
N <- length(R)
Z <- matrix(rep(1:N,N) + rep(1:N,each=N) - 1, N, N)/(2*N-1)
Cov_R <- as.matrix(nearPD(PowExp(R,params = list(sigma=1,theta=2+1/(.1+sqrt(Z)),gamm=1)))$mat)
Z
Z <- matrix(rep(1:N,N) + rep(1:N,each=N) - 1, N, N)/(2*N-1)
Cov_R <- as.matrix(nearPD(PowExp(R,params = list(sigma=1,theta=Z,gamm=1)))$mat)
Cov_R <- as.matrix(nearPD(PowExp(R,params = list(sigma=1,theta=1+Z,gamm=1)))$mat)
Z <- r %*% t(r)
Z
dim(Z)
N <- length(R)
Z <- matrix(rep(1:N,N) + rep(1:N,each=N) - 1, N, N)/(2*N-1)
dim(Z)
matrix(rep(1:N,N)
rep(1:N,N)
N <- length(r)
Z <- matrix(rep(1:N,N) + rep(1:N,each=N) - 1, N, N)/(2*N-1)
Cov_R <- as.matrix(nearPD(PowExp(R,params = list(sigma=1,theta=1+Z,gamm=1)))$mat)
image(t(Z))
N <- length(r)
Z <- matrix(rep(1:N,N) + rep(1:N,each=N) - 1, N, N)/(2*N-1)
Z
Z
Cov_R <- as.matrix(nearPD(PowExp(R,params = list(sigma=1,theta=1+Z,gamm=1)))$mat)
Cov_R
image(t(Cov_R))
Cov_R <- as.matrix(nearPD(PowExp(R,params = list(sigma=1,theta=1-Z,gamm=1)))$mat)
Z <- matrix(rep(1:N,N) + rep(1:N,each=N) - 1, N, N)/(2*N-1)
Cov_R <- as.matrix(nearPD(PowExp(R,params = list(sigma=1,theta=1-Z,gamm=1)))$mat)
Cov_R <- as.matrix(nearPD(PowExp(R,params = list(sigma=1,theta=1+1/Z,gamm=1)))$mat)
image(t(Z))
image(t(Cov_R))
Cov_R <- as.matrix(nearPD(PowExp(R,params = list(sigma=1,theta=1+1/sqrt(Z),gamm=1)))$mat)
image(t(Z))
image(t(Cov_R))
Cov_R <- as.matrix(nearPD(PowExp(R,params = list(sigma=1,theta=1+1/Z,gamm=1)))$mat)
image(t(Z))
image(t(Cov_R))
# Empirical from simulation
data_sim <- mvnfast::rmvn(n = 720,
mu=rep(0,ncol(Cov_R)),sigma = Cov_R)
Cov_R_sim <- cov(data_sim)
image(t(Cov_R_sim))
modelling_table <- data.frame(y=c(Cov_R_sim),
r=c(R),
x1=c(Z))
plot(x=modelling_table$r,
y=modelling_table$y,
col=rgb(1-modelling_table$x1,0,modelling_table$x1))
test_static_fit <- gac(R = R,
X = list(x1=Z),
Emp_Cov = Cov_R_sim,
cov_func = PowExp,
param_eqns = list(~1,
~1,
~1),
loss="LS")
test_static_fit$gac_coef
test_fit <- gac(R = R,
X = list(x1=Z),
Emp_Cov = Cov_R_sim,
cov_func = PowExp,
param_eqns = list(~1,
~s(x1,bs="bs"),
~1),
loss="WLSf",
smoothness_param = 1e-4)
image(t(test_fit$Cov_Est))
modelling_table$y_est <- c(test_fit$Cov_Est)
plot(x=modelling_table$r,
y=modelling_table$y_est,
col=rgb(1-modelling_table$x1,0,modelling_table$x1))
image(Cov_R_sim-nearPD(Cov_R_sim)$mat)
image(test_fit$Cov_Est-nearPD(test_fit$Cov_Est)$mat)
# Realisations
actuals <- mvnfast::rmvn(n = 1000,mu=rep(0,ncol(Cov_R)),sigma = Cov_R)
cov_mats <- list(Name=c("True","Empirical","Static","GAC"),
mat=list(Cov_R,
nearPD(Cov_R_sim)$mat,
nearPD(test_static_fit$Cov_Est)$mat,
nearPD(test_fit$Cov_Est)$mat))
scores <- data.table(index=rep(1:nrow(actuals),length(cov_mats$Name)),
Name=rep(cov_mats$Name,each=nrow(actuals)))
for(cov_i in 1:length(cov_mats$Name)){
for(i in 1:nrow(actuals)){
# Draw sample trajectories
traj <- mvnfast::rmvn(n = 1000,mu=rep(0,ncol(Cov_R)),sigma = cov_mats$mat[[cov_i]])
# es and vs
scores[index==i & Name==cov_mats$Name[[cov_i]], es := es_sample(y=actuals[i,],dat = t(traj))]
scores[index==i & Name==cov_mats$Name[[cov_i]], vs_0_5 := vs_sample_quick(y=actuals[i,],dat = t(traj), p = 0.5)]
scores[index==i & Name==cov_mats$Name[[cov_i]], vs_1 := vs_sample_quick(y=actuals[i,],dat = t(traj), p = 1)]
# log score
scores[index==i & Name==cov_mats$Name[[cov_i]], ls := -log(mvnfast::dmvn(X = actuals[i,],mu = rep(0,ncol(actuals)),sigma = cov_mats$mat[[cov_i]]))]
# Entropy
scores[index==i & Name==cov_mats$Name[[cov_i]], entropy :=
cov_entropy(R_true = Cov_R,R_est = cov_mats$mat[[cov_i]])]
}
}
print(setorder(scores[,mean(es),by="Name"],V1))
print(setorder(scores[,mean(vs_0_5),by="Name"],V1))
print(setorder(scores[,mean(vs_1),by="Name"],V1))
print(setorder(scores[,mean(ls),by="Name"],V1))
print(xtable(scores[,.(`Energy`=mean(es),
`Log`=mean(ls),
`VS-0.5`=mean(vs_0_5),
`VS-1`=mean(vs_1),
Entropy = round(mean(entropy),3)),
by="Name"][order(-Log),],digits = 3),
include.rownames=F)
