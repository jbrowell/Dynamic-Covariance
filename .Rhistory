RR <- solve(R_true) %*% R_est
sum(RR[diag(ncol(RR))==1]) - log(det(RR)) - ncol(RR)
}
## Define data generating process
r <- seq(0,3,by=0.1)
r <- seq(0,1,length.out=51)
load("PSCC22_plots/iso_example.Rda")
print(setorder(scores[,mean(es),by="Name"],V1))
## Bootstrap skill score
scores_boot <- data.table()
ref <- "GAC"
for(m in scores[Name!=ref,unique(Name)]){
for(s in names(scores)[-c(1:2)]){
boot_data <- boot(data = cbind(scores[Name==m,get(s)],scores[Name==ref,get(s)]),
statistic = function(data, i){
100-100*mean(data[i,1])/mean(data[i,2])
},
R=1000)
# if(sd(boot_data$t)==0 | is.na(sd(boot_data$t))){
ci <- data.frame(normal=rep(NA,3))
# }else{
#   ci <- boot.ci(boot_data)
# }
scores_boot <- rbind(scores_boot,
data.table(Name=m,Score=s,
Mean=mean(boot_data$t),SD=sd(boot_data$t),
ci_L=ci$normal[2],ci_R=ci$normal[3]))
}
}; rm(boot_data,ci,s,m)
scores
## Bootstrap skill score
scores_boot <- data.table()
ref <- "True"
for(m in scores[Name!=ref,unique(Name)]){
for(s in names(scores)[-c(1:2)]){
boot_data <- boot(data = cbind(scores[Name==m,get(s)],scores[Name==ref,get(s)]),
statistic = function(data, i){
100-100*mean(data[i,1])/mean(data[i,2])
},
R=1000)
# if(sd(boot_data$t)==0 | is.na(sd(boot_data$t))){
ci <- data.frame(normal=rep(NA,3))
# }else{
#   ci <- boot.ci(boot_data)
# }
scores_boot <- rbind(scores_boot,
data.table(Name=m,Score=s,
Mean=mean(boot_data$t),SD=sd(boot_data$t),
ci_L=ci$normal[2],ci_R=ci$normal[3]))
}
}; rm(boot_data,ci,s,m)
scores_boot[,ci_L := Mean - SD*qt(0.025,999,lower.tail = F)]
scores_boot[,ci_R := Mean + SD*qt(0.025,999,lower.tail = F)]
scores_boot[!(ci_L<0 & ci_R>0),Diff_from_zero:=T]
scores_boot[ci_L<0 & ci_R>0,Diff_from_zero:=F]
scores_boot
## Bootstrap skill score
scores_boot <- data.table()
ref <- "True"
for(m in scores[Name!=ref,unique(Name)]){
for(s in names(scores)[-c(1:2)]){
boot_data <- boot(data = cbind(scores[Name==m,get(s)],scores[Name==ref,get(s)]),
statistic = function(data, i){
100-100*mean(data[i,1])/mean(data[i,2])
},
R=1000)
if(sd(boot_data$t)==0 | is.na(sd(boot_data$t))){
ci <- data.frame(normal=rep(NA,3))
}else{
ci <- boot.ci(boot_data)
}
scores_boot <- rbind(scores_boot,
data.table(Name=m,Score=s,
Mean=mean(boot_data$t),SD=sd(boot_data$t),
ci_L=ci$normal[2],ci_R=ci$normal[3]))
}
}; rm(boot_data,ci,s,m)
for(m in scores[Name!=ref,unique(Name)]){
for(s in names(scores)[-c(1:2)]){
boot_data <- boot(data = cbind(scores[Name==m,get(s)],scores[Name==ref,get(s)]),
statistic = function(data, i){
100-100*mean(data[i,1])/mean(data[i,2])
},
R=1000)
scores_boot <- rbind(scores_boot,
data.table(Name=m,Score=s,
Mean=mean(boot_data$t),SD=sd(boot_data$t),
ci_L=NA,
ci_R=NA))
}
}; rm(boot_data,ci,s,m)
## Bootstrap skill score
scores_boot <- data.table()
ref <- "True"
for(m in scores[Name!=ref,unique(Name)]){
for(s in names(scores)[-c(1:2)]){
boot_data <- boot(data = cbind(scores[Name==m,get(s)],scores[Name==ref,get(s)]),
statistic = function(data, i){
100-100*mean(data[i,1])/mean(data[i,2])
},
R=1000)
scores_boot <- rbind(scores_boot,
data.table(Name=m,Score=s,
Mean=mean(boot_data$t),SD=sd(boot_data$t),
ci_L=NA,
ci_R=NA))
}
}; rm(boot_data,ci,s,m)
scores_boot[,ci_L := Mean - SD*qt(0.025,999,lower.tail = F)]
scores_boot[,ci_R := Mean + SD*qt(0.025,999,lower.tail = F)]
scores_boot[ci_L>0,Diff_from_zero:="+"]
scores_boot[ci_R<0,Diff_from_zero:="-"]
scores_boot[ci_L<=0 & ci_R>=0,Diff_from_zero:="0"]
scores_boot
## Bootstrap skill score
scores_boot <- data.table()
ref <- "GAC-CR"
for(m in scores[Name!=ref,unique(Name)]){
for(s in names(scores)[-c(1:2)]){
boot_data <- boot(data = cbind(scores[Name==m,get(s)],scores[Name==ref,get(s)]),
statistic = function(data, i){
100-100*mean(data[i,1])/mean(data[i,2])
},
R=1000)
scores_boot <- rbind(scores_boot,
data.table(Name=m,Score=s,
Mean=mean(boot_data$t),SD=sd(boot_data$t),
ci_L=NA,
ci_R=NA))
}
}; rm(boot_data,s,m)
scores_boot[,ci_L := Mean - SD*qt(0.025,999,lower.tail = F)]
scores_boot[,ci_R := Mean + SD*qt(0.025,999,lower.tail = F)]
scores_boot[ci_L>0,Diff_from_zero:="+"]
scores_boot[ci_R<0,Diff_from_zero:="-"]
scores_boot[ci_L<=0 & ci_R>=0,Diff_from_zero:="0"]
scores_boot
SD*qt(0.025,999,lower.tail = F)
qt(0.025,999,lower.tail = F)
print(xtable(scores[,.(`Energy`=signif(mean(es),4),
`Log`=signif(mean(ls),4),
`VS-0.5`=signif(mean(vs_0_5),4),
`VS-1`=signif(mean(vs_1),4),
KL = signif(mean(entropy),4)),
by="Name"][order(-Log),],digits = c(NA,NA,3,2,1,1,3),
caption = c("Results of simulation experiment for example \\ref{sec:non-stationary_cov}: Isotropic dynamic covariance."),
label = c("tab:non-stationary_cov")),
caption.placement = "top",table.placement="",
include.rownames=F)
print(xtable(scores[,.(`Energy`=signif(mean(es),4),
`Log`=signif(mean(ls),4),
`VS-0.5`=signif(mean(vs_0_5),4),
`VS-1`=signif(mean(vs_1),4),
KL = signif(mean(entropy),4)),
by="Name"][order(-Log),],digits = c(NA,NA,3,2,1,1,3),
caption = c("Results of simulation experiment for example \\ref{sec:non-stationary_cov}: Isotropic dynamic covariance."),
label = c("tab:non-stationary_cov")),
caption.placement = "top",table.placement="",
include.rownames=F)
nonstat_cor_plot(Cov_R, filename = "PSCC22_plots/Non-stationary_example.eps")
load("PSCC22_plots/nonstat_example.Rda")
nonstat_cor_plot(Cov_R, filename = "PSCC22_plots/Non-stationary_example.eps")
print(xtable(scores[,.(`Energy`=signif(mean(es),4),
`Log`=signif(mean(ls),4),
`VS-0.5`=signif(mean(vs_0_5),4),
`VS-1`=signif(mean(vs_1),4),
KL = signif(mean(entropy),4)),
by="Name"][order(-Log),],digits = c(NA,NA,3,2,1,1,3),
caption = c("Results of simulation experiment for example \\ref{sec:non-stationary_cov}: Isotropic dynamic covariance."),
label = c("tab:non-stationary_cov")),
caption.placement = "top",table.placement="",
include.rownames=F)
## Bootstrap skill score
scores_boot <- data.table()
ref <- "GAC"
for(m in scores[Name!=ref,unique(Name)]){
for(s in names(scores)[-c(1:2)]){
boot_data <- boot(data = cbind(scores[Name==m,get(s)],scores[Name==ref,get(s)]),
statistic = function(data, i){
100-100*mean(data[i,1])/mean(data[i,2])
},
R=1000)
scores_boot <- rbind(scores_boot,
data.table(Name=m,Score=s,
Mean=mean(boot_data$t),SD=sd(boot_data$t),
ci_L=NA,
ci_R=NA))
}
}; rm(boot_data,s,m)
scores_boot[,ci_L := Mean - SD*qt(0.025,999,lower.tail = F)]
scores_boot[,ci_R := Mean + SD*qt(0.025,999,lower.tail = F)]
scores_boot[ci_L>0,Diff_from_zero:="+"]
scores_boot[ci_R<0,Diff_from_zero:="-"]
scores_boot[ci_L<=0 & ci_R>=0,Diff_from_zero:="0"]
scores_boot
# Remove everything apart from functions
rm(list = setdiff(ls(), lsf.str()))
load("PSCC22_plots/iso_example.Rda")
## Bootstrap skill score
scores_boot <- data.table()
ref <- "GAC-CR"
for(m in scores[Name!=ref,unique(Name)]){
for(s in names(scores)[-c(1:2)]){
boot_data <- boot(data = cbind(scores[Name==m,get(s)],scores[Name==ref,get(s)]),
statistic = function(data, i){
100-100*mean(data[i,1])/mean(data[i,2])
},
R=1000)
scores_boot <- rbind(scores_boot,
data.table(Name=m,Score=s,
Mean=mean(boot_data$t),SD=sd(boot_data$t),
ci_L=NA,
ci_R=NA))
}
}; rm(boot_data,s,m)
scores_boot[,ci_L := Mean - SD*qt(0.025,999,lower.tail = F)]
scores_boot[,ci_R := Mean + SD*qt(0.025,999,lower.tail = F)]
scores_boot[ci_L>0,Diff_from_zero:="+"]
scores_boot[ci_R<0,Diff_from_zero:="-"]
scores_boot[ci_L<=0 & ci_R>=0,Diff_from_zero:="0"]
scores_boot
# Remove everything apart from functions
rm(list = setdiff(ls(), lsf.str()))
load("data/windsolar_fc.rda")
zone_dat[,g_val:=qnorm(u_val)]
zone_dat[g_val%in%c(-Inf,Inf),g_val:=NA]
gobs <- dcast(zone_dat,
kfold+issueTime~id+lead_time,
value.var = c("g_val"),
drop = TRUE)
setorder(gobs,issueTime)
gobs[,1:10]
WindSolar_Cor <- cor(gobs[,-c(1,2)],use = "pairwise.complete.obs")
col6 <- colorRampPalette(c("blue","cyan","yellow","red"))
lattice::levelplot(WindSolar_Cor,xlab="node id", ylab="node id",
col.regions=col6(600), cuts=100, at=seq(-0.1,1,0.01),
scales=list(x=list(at = seq(0,48,12),rot=45),y=list(rot=45),tck=0.3,cex=0.1))
## Wind - Temporal ####
# issue time dependency
gobs <- dcast(zone_dat[id=="wind_scotland",],
kfold+issueTime~id+lead_time,
value.var = c("g_val"),
drop = TRUE)
setorder(gobs,issueTime)
gobs[,1:10]
# issue time dependency, neet to 1) not to mix, or 2) model explicitly
gobs <- dcast(zone_dat[id=="wind_scotland",],
kfold+issueTime~id+lead_time,
value.var = c("g_val"),
drop = TRUE)
setorder(gobs,issueTime)
gobs[,1:10]
# Convert to correlation matrix
WindScot_Cov <- cov(gobs[hour(issueTime)==0 & kfold!="Test",][,-c(1,2)],use = "pairwise.complete.obs")
WindScot_K <- diag(sqrt(1/diag(WindScot_Cov)))
WindScot_K_inv <- solve(WindScot_K)
WindScot_Cor <- WindScot_K %*% WindScot_Cov %*% WindScot_K
diag(WindScot_Cor) <- 1
col6 <- colorRampPalette(c("blue","cyan","yellow","red"))
r <- seq(0,48,by=0.5)
R <- as.matrix(dist(r))
## For correlation, need to fix sigma = 1, so covert to correlation function
PowExp_cor <- function(params,...){
PowExp(params = list(sigma=1,theta=params[[1]],gamma=params[[2]]),...)
}
## Static fit
WindScot_static_fit <- gac(R = R,
X = list(),
Emp_Cov = WindScot_Cor,
cov_func = PowExp_cor,
param_eqns = list(~1,
~1),
loss="WLS")
# "Dist along diagonal"
N <- length(r)
Z <- matrix(rep(1:N,N) + rep(1:N,each=N) - 1, N, N)/(2*N-1)
# Z = "Dist along diagonal"
N <- length(r)
Z <- matrix(rep(1:N,N) + rep(1:N,each=N) - 1, N, N)/(2*N-1)
N <- matrix(rep(r,each=length(r)),length(r),length(r))
WindScot_gac_fit <- gac(R = R,
X = list(x1=Z),
Emp_Cov = WindScot_Cor,
cov_func = PowExp_cor,
param_eqns = list(~s(x1,bs="bs",k=20),
~1),
loss="WLS",smoothness_param = 0)
WindScot_gac_fit <- gac(R = R,
X = list(x1=Z),
Emp_Cov = WindScot_Cor,
cov_func = PowExp_cor,
param_eqns = list(~s(x1,bs="cr",k=20),
~1),
loss="WLS",smoothness_param = 0)
WindScot_gac_fit
WindScot_gac_fit <- gac(R = R,
X = list(x1=Z),
Emp_Cov = WindScot_Cor,
cov_func = PowExp_cor,
param_eqns = list(~s(x1,bs="cr",k=20),
~1),
loss="WLS",smoothness_param = 0.5)
WindScot_gac_fit
## Plots
wind_cor_plot <- function(data,filename=NULL,...){
h <- lattice::levelplot(data,
xlab = list(label="Lead-time [hours]",cex=1.2),
ylab = list(label="Lead-time [hours]",cex=1.2),
col.regions=col6(600), cuts=100, at=seq(-.1,1.05,0.01),
scales=list(x=list(at = seq(1,97,12),lab=seq(0,96,12)/2,rot=45),
y=list(at = seq(1,97,12),lab=seq(0,96,12)/2,rot=45),tck=0.3,cex=1.2),
...)
if(!is.null(filename)){
setEPS(); postscript(filename)
print(h)
dev.off()
}
print(h)
}
lattice::lattice.options(
layout.heights=list(bottom.padding=list(x=1), top.padding=list(x=-1)),
layout.widths=list(left.padding=list(x=-0.5), right.padding=list(x=-1))
)
wind_cor_plot(WindScot_Cor,colorkey=F,filename = "PSCC22_plots/Wind_Emp.eps")
wind_cor_plot(WindScot_static_fit$Cov_Est,colorkey=F,filename = "PSCC22_plots/Wind_Const.eps")
wind_cor_plot(WindScot_gac_fit$Cov_Est,colorkey=F,filename = "PSCC22_plots/Wind_gac.eps")
modelling_table <- data.frame(y=c(WindScot_Cor),
r=c(R),
x1=c(Z),
y_est_static=c(WindScot_static_fit$Cov_Est),
y_est_gac=c(WindScot_gac_fit$Cov_Est))
plot(x=modelling_table$r,
y=modelling_table$y,
col="grey",pch=".")
points(x=modelling_table$r,
y=modelling_table$y_est_static,
col="red")
points(x=modelling_table$r,
y=modelling_table$y_est_gac,
col="blue")
scatter3D(modelling_table$r,
modelling_table$x1,
modelling_table$y,
col = "red",xlab="time diff",ylab="dist_along diag",zlab="covariance")
plotrgl()
plot1 <- plotly::plot_ly(x=modelling_table$r,
y=modelling_table$x1,
z=modelling_table$y, type="scatter3d", mode="markers", color = I("grey"),
marker = list(size = 1,opacity = 0.5),
name = "empirical")
modelling_table$y_est <- c(WindScot_static_fit$Cov_Est)
plot2 <- plotly::plot_ly(x=modelling_table$r,
y=modelling_table$x1,
z=modelling_table$y_est, type="scatter3d", mode="markers", color = I("red"),
marker = list(size = 1,opacity = 0.5),
name = "static")
modelling_table$y_est <- c(WindScot_gac_fit$Cov_Est)
plot3 <- plotly::plot_ly(x=modelling_table$r,
y=modelling_table$x1,
z=modelling_table$y_est, type="scatter3d", mode="markers", color = I("blue"),
marker = list(size = 1,opacity = 0.5),
name = "gac")
plot <- plotly::subplot(plot1,plot2,plot3,nrows = 1)
plotly::layout(plot, scene = list(xaxis = list(title = 'dt [hours]'), yaxis = list(title = 'dist along diag [-]'), zaxis = list(title = 'covariance [-]')))
invisible(gc())
actuals <- as.matrix(na.omit(gobs[hour(issueTime)==0 & kfold=="Test",][,-c(1,2)]))
cov_mats <- list(Name=c("Empirical","Constant","GAC"),
mat=list(WindScot_K_inv %*% WindScot_Cor %*% WindScot_K_inv,
WindScot_K_inv %*% WindScot_static_fit$Cov_Est %*% WindScot_K_inv,
WindScot_K_inv %*% WindScot_gac_fit$Cov_Est %*% WindScot_K_inv))
scores <- data.table(index=rep(1:nrow(actuals),length(cov_mats$Name)),
Name=rep(cov_mats$Name,each=nrow(actuals)))
scores <- data.table(index=rep(1:nrow(actuals),length(cov_mats$Name)),
Name=rep(cov_mats$Name,each=nrow(actuals)))
for(cov_i in 1:length(cov_mats$Name)){
cov_mats$mat[[cov_i]] <- nearPD(cov_mats$mat[[cov_i]])$mat
for(i in 1:nrow(actuals)){
# Draw sample trajectories
traj <- mvnfast::rmvn(n = 2500,mu=rep(0,ncol(cov_mats$mat[[cov_i]])),sigma = cov_mats$mat[[cov_i]])
# es and vs
scores[index==i & Name==cov_mats$Name[[cov_i]], es := es_sample(y=actuals[i,],dat = t(traj))]
scores[index==i & Name==cov_mats$Name[[cov_i]], vs_0_5 := vs_sample_quick(y=actuals[i,],dat = t(traj), p = 0.5)]
scores[index==i & Name==cov_mats$Name[[cov_i]], vs_1 := vs_sample_quick(y=actuals[i,],dat = t(traj), p = 1)]
# log score
scores[index==i & Name==cov_mats$Name[[cov_i]], ls := -log(mvnfast::dmvn(X = actuals[i,],mu = rep(0,ncol(actuals)),sigma = cov_mats$mat[[cov_i]]))]
}
}
for(cov_i in 1:length(cov_mats$Name)){
cov_mats$mat[[cov_i]] <- nearPD(cov_mats$mat[[cov_i]])$mat
for(i in 1:nrow(actuals)){
# Draw sample trajectories
traj <- mvnfast::rmvn(n = 1000,mu=rep(0,ncol(cov_mats$mat[[cov_i]])),sigma = cov_mats$mat[[cov_i]])
# es and vs
scores[index==i & Name==cov_mats$Name[[cov_i]], es := es_sample(y=actuals[i,],dat = t(traj))]
scores[index==i & Name==cov_mats$Name[[cov_i]], vs_0_5 := vs_sample_quick(y=actuals[i,],dat = t(traj), p = 0.5)]
scores[index==i & Name==cov_mats$Name[[cov_i]], vs_1 := vs_sample_quick(y=actuals[i,],dat = t(traj), p = 1)]
# log score
scores[index==i & Name==cov_mats$Name[[cov_i]], ls := -log(mvnfast::dmvn(X = actuals[i,],mu = rep(0,ncol(actuals)),sigma = cov_mats$mat[[cov_i]]))]
}
}
for(cov_i in 1:length(cov_mats$Name)){
print(cov_mats$Name[cov_i])
pb <- progress_bar$new(total = nrow(actuals))
cov_mats$mat[[cov_i]] <- nearPD(cov_mats$mat[[cov_i]])$mat
for(i in 1:nrow(actuals)){
pb$tick()
# Draw sample trajectories
traj <- mvnfast::rmvn(n = 1000,mu=rep(0,ncol(cov_mats$mat[[cov_i]])),sigma = cov_mats$mat[[cov_i]])
# es and vs
scores[index==i & Name==cov_mats$Name[[cov_i]], es := es_sample(y=actuals[i,],dat = t(traj))]
scores[index==i & Name==cov_mats$Name[[cov_i]], vs_0_5 := vs_sample_quick(y=actuals[i,],dat = t(traj), p = 0.5)]
scores[index==i & Name==cov_mats$Name[[cov_i]], vs_1 := vs_sample_quick(y=actuals[i,],dat = t(traj), p = 1)]
# log score
scores[index==i & Name==cov_mats$Name[[cov_i]], ls := -log(mvnfast::dmvn(X = actuals[i,],mu = rep(0,ncol(actuals)),sigma = cov_mats$mat[[cov_i]]))]
}
}
save.image(file="PSCC22_plots/wind_example.Rda")
print(setorder(scores[,mean(es),by="Name"],V1))
print(setorder(scores[,mean(vs_0_5),by="Name"],V1))
print(setorder(scores[,mean(vs_1),by="Name"],V1))
print(setorder(scores[,mean(ls),by="Name"],V1))
WindScot_gac_fit <- gac(R = R,
X = list(x1=Z),
Emp_Cov = WindScot_Cor,
cov_func = PowExp_cor,
param_eqns = list(~s(x1,bs="cr",k=20),
~1),
loss="WLS",smoothness_param = 0.1)
## Plots
wind_cor_plot <- function(data,filename=NULL,...){
h <- lattice::levelplot(data,
xlab = list(label="Lead-time [hours]",cex=1.2),
ylab = list(label="Lead-time [hours]",cex=1.2),
col.regions=col6(600), cuts=100, at=seq(-.1,1.05,0.01),
scales=list(x=list(at = seq(1,97,12),lab=seq(0,96,12)/2,rot=45),
y=list(at = seq(1,97,12),lab=seq(0,96,12)/2,rot=45),tck=0.3,cex=1.2),
...)
if(!is.null(filename)){
setEPS(); postscript(filename)
print(h)
dev.off()
}
print(h)
}
lattice::lattice.options(
layout.heights=list(bottom.padding=list(x=1), top.padding=list(x=-1)),
layout.widths=list(left.padding=list(x=-0.5), right.padding=list(x=-1))
)
wind_cor_plot(WindScot_Cor,colorkey=F,filename = "PSCC22_plots/Wind_Emp.eps")
wind_cor_plot(WindScot_static_fit$Cov_Est,colorkey=F,filename = "PSCC22_plots/Wind_Const.eps")
wind_cor_plot(WindScot_gac_fit$Cov_Est,colorkey=F,filename = "PSCC22_plots/Wind_gac.eps")
actuals <- as.matrix(na.omit(gobs[hour(issueTime)==0 & kfold=="Test",][,-c(1,2)]))
cov_mats <- list(Name=c("Empirical","Constant","GAC"),
mat=list(WindScot_K_inv %*% WindScot_Cor %*% WindScot_K_inv,
WindScot_K_inv %*% WindScot_static_fit$Cov_Est %*% WindScot_K_inv,
WindScot_K_inv %*% WindScot_gac_fit$Cov_Est %*% WindScot_K_inv))
scores <- data.table(index=rep(1:nrow(actuals),length(cov_mats$Name)),
Name=rep(cov_mats$Name,each=nrow(actuals)))
for(cov_i in 1:length(cov_mats$Name)){
print(cov_mats$Name[cov_i])
pb <- progress_bar$new(total = nrow(actuals))
cov_mats$mat[[cov_i]] <- nearPD(cov_mats$mat[[cov_i]])$mat
for(i in 1:nrow(actuals)){
pb$tick()
# Draw sample trajectories
traj <- mvnfast::rmvn(n = 2500,mu=rep(0,ncol(cov_mats$mat[[cov_i]])),sigma = cov_mats$mat[[cov_i]])
# es and vs
scores[index==i & Name==cov_mats$Name[[cov_i]], es := es_sample(y=actuals[i,],dat = t(traj))]
scores[index==i & Name==cov_mats$Name[[cov_i]], vs_0_5 := vs_sample_quick(y=actuals[i,],dat = t(traj), p = 0.5)]
scores[index==i & Name==cov_mats$Name[[cov_i]], vs_1 := vs_sample_quick(y=actuals[i,],dat = t(traj), p = 1)]
# log score
scores[index==i & Name==cov_mats$Name[[cov_i]], ls := -log(mvnfast::dmvn(X = actuals[i,],mu = rep(0,ncol(actuals)),sigma = cov_mats$mat[[cov_i]]))]
}
}
save.image(file="PSCC22_plots/wind_example.Rda")
print(setorder(scores[,mean(es),by="Name"],V1))
print(setorder(scores[,mean(vs_0_5),by="Name"],V1))
print(setorder(scores[,mean(vs_1),by="Name"],V1))
print(setorder(scores[,mean(ls),by="Name"],V1))
print(xtable(scores[,.(`Energy`=signif(mean(es),4),
`Log`=signif(mean(ls),4),
`VS-0.5`=signif(mean(vs_0_5),4),
`VS-1`=signif(mean(vs_1),4)),
by="Name"][order(-Log),],digits = c(NA,0,3,2,0,0),
caption = c("Results for temporal wind power forecasting."),
label = c("tab:wind_cov")),
caption.placement = "top",table.placement="",
include.rownames=F)
## Bootstrap skill score
scores_boot <- data.table()
ref <- "GAC"
for(m in scores[Name!=ref,unique(Name)]){
for(s in names(scores)[-c(1:2)]){
boot_data <- boot(data = cbind(scores[Name==m,get(s)],scores[Name==ref,get(s)]),
statistic = function(data, i){
100-100*mean(data[i,1])/mean(data[i,2])
},
R=1000)
scores_boot <- rbind(scores_boot,
data.table(Name=m,Score=s,
Mean=mean(boot_data$t),SD=sd(boot_data$t)))
}
}; rm(boot_data,ci,s,m)
scores_boot[,ci_L := Mean - SD*qt(0.025,999,lower.tail = F)]
scores_boot[,ci_R := Mean + SD*qt(0.025,999,lower.tail = F)]
scores_boot[ci_L>0,Diff_from_zero:="+"]
scores_boot[ci_R<0,Diff_from_zero:="-"]
scores_boot[ci_L<=0 & ci_R>=0,Diff_from_zero:="0"]
scores_boot
scores[Name="Empirical",]
scores[Name=="Empirical",]
scores[Name=="Empirical",unique(ls)]
