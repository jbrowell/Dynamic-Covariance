install.packages("data.table")
require(data.table)
rm(list=ls())
require(rstudioapi)
install.packages(devtools)
install.packages("devtools")
require(devtools)
install_github("jbrowell/ProbCast")
install_github("jbrowell/ProbCast")
?install.packages
install("../GItHub/ProbCast/")
install.packages(tidyverse)
install.packages("tidyverse")
dplyr::near(sqrt(2)^2,2)
sqrt(2)^2==2
rm(list=ls())
require(rstudioapi)
require(data.table)
require(plot3D)
require(plot3Drgl)
require(mvnfast)
require(mgcv)
require(roxygen2)
require(devtools)
setwd(dirname(getActiveDocumentContext()$path))
remove.packages("gac")
# Update package documentation
document(pkg = ".")
# Install from local repository
install(".")
# Load Package
require(gac)
##  faster VS score, half the time on sR... ####
vs_sample_quick <- function (y, dat, w = NULL, p = 0.5) {
d <- length(y)
out <- 0
for (i in seq_len(d)) {
for (j in seq_len(i)){
vdat <- mean(abs(dat[i, ] - dat[j, ])^p)
vy <- abs(y[i] - y[j])^p
if (is.null(w)) {
out <- out + (vy - vdat)^2
} else {
out <- out + w[i, j] * (vy - vdat)^2
}
}
}
return(2*out)
}
## Notes for the future ####
# Try nls()... e.g. formula = cov ~ cov_function(...)
# End goal: estimate and sample mvn. This script focuses on estimating
# parametric contrivance functions.
# Alternative, estimate (sparse) precision matrix e.g. "glasso" then
# sample using "sparseMVN::rmvn.sparse()"...
## Form single-variate symmetric matrix, sample and fit  ####
r <- seq(0,3,by=0.1)
R <- as.matrix(dist(r))
Cov_R <- PowExp(R,params = c(sqrt(2),1.5,0.8))
# Cov_R <- Spherical(R)
image(t(Cov_R))
surf3D(matrix(r,length(r),length(r),byrow = F),
matrix(r,length(r),length(r),byrow = T),
Cov_R,
colvar = Cov_R, colkey = F, facets = F,bty="f",
xlab="Lead-time",ylab="Lead-time",zlab="Covariance",
zlim=c(0,1),theta = -10,phi = 10)
# plotrgl()
## Visualisations
# r <- seq(0,3,by=0.01)
# plot(r,PowExp(r),type="l",ylim = c(0,1.1))
# lines(r,Whittle_Matern(r),col=2)
# lines(r,Cauchy(r),col=3)
# lines(r,Spherical(r,theta = 2),col=4)
## Sample
data_sim <- mvnfast::rmvn(n = 2^11,mu=rep(0,ncol(Cov_R)),sigma = Cov_R)
Cov_R_sim <- cov(data_sim)
image(t(Cov_R_sim))
image(t(Cov_R_sim-Cov_R))
gac_obj(c(1,1,1),R,Cov_R_sim,cov_func=PowExp,loss="WLS")
Fit1 <- optim(par=c(1,1,1),
gac_obj,
method = "L-BFGS-B",
lower=c(0,0,0),
upper = c(Inf,Inf,2),
R=R,Emp_Cov = Cov_R_sim,
cov_func=Spherical)
Cov_R_fit <- PowExp(R,params =  Fit1$par)
plot(c(R),c(Cov_R_sim),pch=16,col=rgb(0,1,0,alpha = .1))
points(c(R),c(Cov_R),pch=16)
points(c(R),c(Cov_R_fit),pch=16,col=2)
# Remove everything apart from functions
rm(list = setdiff(ls(), lsf.str()))
## Example with changing parameter ####
require(Matrix)
r <- seq(0,1,length.out=24)
R <- as.matrix(dist(r))
Z <- r %*% t(r) # NB: Cov is no longer a function of separation only...
image(t(Z))
# True Covariance
Cov_R <- as.matrix(nearPD(PowExp(R,params = list(sigma=1,theta=2+1/(.1+sqrt(Z)),gamm=1)))$mat)
image(t(Cov_R))
# Empirical from simulation
data_sim <- mvnfast::rmvn(n = 720,
mu=rep(0,ncol(Cov_R)),sigma = Cov_R)
Cov_R_sim <- cov(data_sim)
image(t(Cov_R_sim))
modelling_table <- data.frame(y=c(Cov_R_sim),
r=c(R),
x1=c(Z))
plot(x=modelling_table$r,
y=modelling_table$y,
col=rgb(1-modelling_table$x1,0,modelling_table$x1))
test_static_fit <- gac(R = R,
X = list(x1=Z),
Emp_Cov = Cov_R_sim,
cov_func = PowExp,
param_eqns = list(~1,
~1,
~1),
loss="WLSf")
test_fit <- gac(R = R,
X = list(x1=Z),
Emp_Cov = Cov_R_sim,
cov_func = PowExp,
param_eqns = list(~1,
~s(x1,bs="bs"),
~1),
loss="WLSf",
smoothness_param = 0)
test_fit
test_static_fit
test_fit
test_fit <- gac(R = R,
X = list(x1=Z),
Emp_Cov = Cov_R_sim,
cov_func = PowExp,
param_eqns = list(~1,
~s(x1,bs="bs"),
~1),
loss="WLSf",
smoothness_param = 0)
#'  \item{WLS}{Weighted Leased Squares - weigthing by correlation}
#'  \item{WLSf}{Weighted Leased Squares - weigthing by all correlations}
#'  \item{LS}{Least Squares}
#' }
#' @param smoothness_param Parameter to control smoothness, is the weight that multiples
#' squared second derivative of smooth splines.
#' @details Fits models for generalised additive covariance functions. Work in progress!
#' @return Returns an object of class \code{gac} for which methods will be written...
#' @keywords Covariance Function
#' @export
gac <- function(R,
X,
Emp_Cov,
cov_func,
param_eqns,
param_init=NULL,
loss="WLS",
smoothness_param=0){
## Create modeling table of expanded basis from param_equations
modelling_table <- data.frame(y=c(Emp_Cov),
r=c(R))
design_mat <- list()
pen_mat <- list()
for(i in names(X)){
modelling_table[[i]] <- c(X[[i]])
}
for(i in 1:length(param_eqns)){
# design_mat[[i]] <- model.matrix(param_eqns[[i]],data = modelling_table)
gam_prefit <- gam(update(param_eqns[[i]],"y~."),data = modelling_table,fit = F)
design_mat[[i]] <- gam_prefit$X
# Penalty matrix
pen_mat[[i]] <- gam_prefit$S
}
## Create objective function for model parameters ~ need some penalty on smoothness?
internal_gac_obj <- function(gac_coef){#,design_mat,R,Emp_Cov,cov_func){
# Calculate parametric covairance matrix from supplied parameters and equations/design matrix
n_gac_coef <- unlist(lapply(design_mat,ncol))
params <- list()
penalty <- 0
for(i in 1:length(design_mat)){
params[[i]] <-  matrix(design_mat[[i]] %*% gac_coef[
sum(n_gac_coef[0:(i-1)])+1:n_gac_coef[i]],
ncol = ncol(R))
## Smoothness penalty?
if(length(pen_mat[[i]])==0){next}
pen_dim <- cumsum(c(0,sapply(pen_mat[[i]],ncol)))
temp_coef <- gac_coef[sum(n_gac_coef[0:(i-1)])+1:n_gac_coef[i]][colnames(design_mat[[i]])!="(Intercept)"]
for(j in 1:length(pen_mat[[i]])){
temp_coef2 <- temp_coef[1:ncol(pen_mat[[i]][[j]])+pen_dim[j]]
penalty <- penalty + t(temp_coef2) %*% pen_mat[[i]][[j]] %*% temp_coef2
}
}
gac_obj(params = params,R = R,Emp_Cov = Emp_Cov,cov_func = cov_func,loss = loss,
optim_bound=T,pen=smoothness_param*penalty)
}
## Estimate parameters
# Prep initial values
if(is.null(param_init)){
param_init <- rep(1,length(param_eqns))
}
gac_coef_init <- c()
for(i in 1:length(design_mat)){
gac_coef_init <- c(gac_coef_init,param_init[i],rep(0,ncol(design_mat[[i]])-1))
}
# Check first evaluation...
temp_test <- try(internal_gac_obj(gac_coef = gac_coef_init))#,design_mat = design_mat,
# R = R,Emp_Cov = Emp_Cov,cov_func = cov_func))
if(class(temp_test)[1]=="try.error"){stop("First evaluation of objective function (with param_init) failed.")}
rm(temp_test)
# Perform optimisation...
Fit1 <- optim(par = gac_coef_init,
fn = internal_gac_obj,
# design_mat = design_mat,
# R = R,
# Emp_Cov = Emp_Cov,
# cov_func = cov_func,
# loss = loss,
method = "BFGS")
## Return as "gac" class
param_est <- list()
gac_coef <- list()
n_gac_coef <- unlist(lapply(design_mat,ncol))
penalty <- 0
for(i in 1:length(design_mat)){
gac_coef[[i]] <- Fit1$par[sum(n_gac_coef[0:(i-1)])+1:n_gac_coef[i]]
param_est[[i]] <-  matrix(design_mat[[i]] %*% gac_coef[[i]],ncol = ncol(R))
## Smoothness penalty?
if(length(pen_mat[[i]])==0){next}
pen_dim <- cumsum(c(0,sapply(pen_mat[[i]],ncol)))
temp_coef <- gac_coef[[i]][colnames(design_mat[[i]])!="(Intercept)"]
for(j in 1:length(pen_mat[[i]])){
temp_coef2 <- temp_coef[1:ncol(pen_mat[[i]][[j]])+pen_dim[j]]
penalty <- penalty + t(temp_coef2) %*% pen_mat[[i]][[j]] %*% temp_coef2
}
}
output <- list(call=match.call(),
R=R,X=X,
Cov_Est = cov_func(r=R,params = param_est),
param_est=param_est,
gac_coef=gac_coef,
loss_final = Fit1$value,
penalty = penalty)
class(output) <- "gac"
return(output)
}
test_fit <- gac(R = R,
X = list(x1=Z),
Emp_Cov = Cov_R_sim,
cov_func = PowExp,
param_eqns = list(~1,
~s(x1,bs="bs"),
~1),
loss="WLSf",
smoothness_param = 0)
test_fit
#'  \item{WLS}{Weighted Leased Squares - weigthing by correlation}
#'  \item{WLSf}{Weighted Leased Squares - weigthing by all correlations}
#'  \item{LS}{Least Squares}
#' }
#' @param smoothness_param Parameter to control smoothness, is the weight that multiples
#' squared second derivative of smooth splines.
#' @details Fits models for generalised additive covariance functions. Work in progress!
#' @return Returns an object of class \code{gac} for which methods will be written...
#' @keywords Covariance Function
#' @export
gac <- function(R,
X,
Emp_Cov,
cov_func,
param_eqns,
param_init=NULL,
loss="WLS",
smoothness_param=0){
## Create modeling table of expanded basis from param_equations
modelling_table <- data.frame(y=c(Emp_Cov),
r=c(R))
design_mat <- list()
pen_mat <- list()
for(i in names(X)){
modelling_table[[i]] <- c(X[[i]])
}
for(i in 1:length(param_eqns)){
# design_mat[[i]] <- model.matrix(param_eqns[[i]],data = modelling_table)
gam_prefit <- gam(update(param_eqns[[i]],"y~."),data = modelling_table,fit = F)
design_mat[[i]] <- gam_prefit$X
# Penalty matrix
pen_mat[[i]] <- gam_prefit$S
}
## Create objective function for model parameters ~ need some penalty on smoothness?
internal_gac_obj <- function(gac_coef){#,design_mat,R,Emp_Cov,cov_func){
# Calculate parametric covairance matrix from supplied parameters and equations/design matrix
n_gac_coef <- unlist(lapply(design_mat,ncol))
params <- list()
penalty <- 0
for(i in 1:length(design_mat)){
params[[i]] <-  matrix(design_mat[[i]] %*% gac_coef[
sum(n_gac_coef[0:(i-1)])+1:n_gac_coef[i]],
ncol = ncol(R))
## Smoothness penalty?
if(length(pen_mat[[i]])==0){next}
pen_dim <- cumsum(c(0,sapply(pen_mat[[i]],ncol)))
temp_coef <- gac_coef[sum(n_gac_coef[0:(i-1)])+1:n_gac_coef[i]][colnames(design_mat[[i]])!="(Intercept)"]
for(j in 1:length(pen_mat[[i]])){
temp_coef2 <- temp_coef[1:ncol(pen_mat[[i]][[j]])+pen_dim[j]]
penalty <- penalty + t(temp_coef2) %*% pen_mat[[i]][[j]] %*% temp_coef2
}
}
gac_obj(params = params,R = R,Emp_Cov = Emp_Cov,cov_func = cov_func,loss = loss,
optim_bound=T,pen=smoothness_param*penalty)
}
## Estimate parameters
# Prep initial values
if(is.null(param_init)){
param_init <- rep(1,length(param_eqns))
}
gac_coef_init <- c()
for(i in 1:length(design_mat)){
gac_coef_init <- c(gac_coef_init,param_init[i],rep(0,ncol(design_mat[[i]])-1))
}
# Check first evaluation...
temp_test <- try(internal_gac_obj(gac_coef = gac_coef_init))#,design_mat = design_mat,
# R = R,Emp_Cov = Emp_Cov,cov_func = cov_func))
if(class(temp_test)[1]=="try.error"){stop("First evaluation of objective function (with param_init) failed.")}
rm(temp_test)
# Perform optimisation...
Fit1 <- optim(par = gac_coef_init,
fn = internal_gac_obj,
# design_mat = design_mat,
# R = R,
# Emp_Cov = Emp_Cov,
# cov_func = cov_func,
# loss = loss,
method = "BFGS")
## Return as "gac" class
param_est <- list()
gac_coef <- list()
n_gac_coef <- unlist(lapply(design_mat,ncol))
penalty <- 0
for(i in 1:length(design_mat)){
gac_coef[[i]] <- Fit1$par[sum(n_gac_coef[0:(i-1)])+1:n_gac_coef[i]]
param_est[[i]] <-  matrix(design_mat[[i]] %*% gac_coef[[i]],ncol = ncol(R))
## Smoothness penalty?
if(length(pen_mat[[i]])==0){next}
pen_dim <- cumsum(c(0,sapply(pen_mat[[i]],ncol)))
temp_coef <- gac_coef[[i]][colnames(design_mat[[i]])!="(Intercept)"]
for(j in 1:length(pen_mat[[i]])){
temp_coef2 <- temp_coef[1:ncol(pen_mat[[i]][[j]])+pen_dim[j]]
penalty <- penalty + t(temp_coef2) %*% pen_mat[[i]][[j]] %*% temp_coef2
}
}
output <- list(call=match.call(),
R=R,X=X,
Cov_Est = cov_func(r=R,params = param_est),
param_est=param_est,
gac_coef=gac_coef,
loss_final = Fit1$value,
penalty = as.numeric(penalty))
class(output) <- "gac"
return(output)
}
test_fit <- gac(R = R,
X = list(x1=Z),
Emp_Cov = Cov_R_sim,
cov_func = PowExp,
param_eqns = list(~1,
~s(x1,bs="bs"),
~1),
loss="WLSf",
smoothness_param = 0)
test_fit
test_fit <- gac(R = R,
X = list(x1=Z),
Emp_Cov = Cov_R_sim,
cov_func = PowExp,
param_eqns = list(~1,
~s(x1,bs="bs"),
~1),
loss="WLSf",
smoothness_param = 1e-4)
test_fit
image(t(test_fit$Cov_Est))
test_fit <- gac(R = R,
X = list(x1=Z),
Emp_Cov = Cov_R_sim,
cov_func = PowExp,
param_eqns = list(~1,
~s(x1,bs="bs"),
~1),
loss="WLSf",
smoothness_param = 0)
image(t(test_fit$Cov_Est))
modelling_table$y_est <- c(test_fit$Cov_Est)
plot(x=modelling_table$r,
y=modelling_table$y_est,
col=rgb(1-modelling_table$x1,0,modelling_table$x1))
image(Cov_R_sim-nearPD(Cov_R_sim)$mat)
image(test_fit$Cov_Est-nearPD(test_fit$Cov_Est)$mat)
## Evaluate with log score, variogram score and energy score
require(scoringRules)
# Realisations
actuals <- mvnfast::rmvn(n = 1000,mu=rep(0,ncol(Cov_R)),sigma = Cov_R)
cov_mats <- list(Name=c("True","Empirical","Static","GAC"),
mat=list(Cov_R,
nearPD(Cov_R_sim)$mat,
nearPD(test_static_fit$Cov_Est)$mat,
nearPD(test_fit$Cov_Est)$mat))
scores <- data.table(index=rep(1:nrow(actuals),length(cov_mats$Name)),
Name=rep(cov_mats$Name,each=nrow(actuals)))
for(cov_i in 1:length(cov_mats$Name)){
for(i in 1:nrow(actuals)){
# Draw sample trajectories
traj <- mvnfast::rmvn(n = 1000,mu=rep(0,ncol(Cov_R)),sigma = cov_mats$mat[[cov_i]])
# es and vs
scores[index==i & Name==cov_mats$Name[[cov_i]], es := es_sample(y=actuals[i,],dat = t(traj))]
scores[index==i & Name==cov_mats$Name[[cov_i]], vs_0_5 := vs_sample_quick(y=actuals[i,],dat = t(traj), p = 0.5)]
scores[index==i & Name==cov_mats$Name[[cov_i]], vs_1 := vs_sample_quick(y=actuals[i,],dat = t(traj), p = 1)]
# log score
scores[index==i & Name==cov_mats$Name[[cov_i]], ls := -log(mvnfast::dmvn(X = actuals[i,],mu = rep(0,ncol(actuals)),sigma = cov_mats$mat[[cov_i]]))]
}
}
load("data/windsolar_fc.rda")
zone_dat
zone_mod$solar_rest_gb
zone_dat$u_val
zone_dat
?covcor_matrix
uobs <- dcast(zone_dat,
kfold+issueTime~id+lead_time,
value.var = c("u_val"),
drop = TRUE)
setorder(uobs,issueTime)
uobs[,1:10]
uobs[,-1]
cov(uobs[,-1])
uobs[,-1]
dim(uobs[,-1])
cov(uobs[,-1])
cov(as.numeric(uobs[,-1]))
as.numeric(uobs[,-1])
cov(uobs[,-c(1,2)])
cov(uobs[,-c(1,2)],method = "pairwise.complete")
cov(uobs[,-c(1,2)],use = "pairwise.complete.obs")
WindSolar_Cov <- cov(uobs[,-c(1,2)],use = "pairwise.complete.obs")
image(WindSolar_Cov)
col6 <- colorRampPalette(c("blue","cyan","yellow","red"))
lattice::levelplot(WindSolar_Cov,xlab="node id", ylab="node id",
col.regions=col6(600), cuts=100, at=seq(0,1,0.01),
scales=list(x=list(rot=45),y=list(rot=45),tck=0.3,cex=0.1))
WindSolar_Cov <- cor(uobs[,-c(1,2)],use = "pairwise.complete.obs")
col6 <- colorRampPalette(c("blue","cyan","yellow","red"))
lattice::levelplot(WindSolar_Cov,xlab="node id", ylab="node id",
col.regions=col6(600), cuts=100, at=seq(0,1,0.01),
scales=list(x=list(rot=45),y=list(rot=45),tck=0.3,cex=0.1))
lattice::levelplot(WindSolar_Cov,xlab="node id", ylab="node id",
col.regions=col6(600), cuts=100, at=seq(-0.1,1,0.01),
scales=list(x=list(rot=45),y=list(rot=45),tck=0.3,cex=0.1))
lattice::levelplot(WindSolar_Cov,xlab="node id", ylab="node id",
col.regions=col6(600), cuts=100, at=seq(-0.15,1,0.01),
scales=list(x=list(rot=45),y=list(rot=45),tck=0.3,cex=0.1))
lattice::levelplot(WindSolar_Cov,xlab="node id", ylab="node id",
col.regions=col6(600), cuts=100, at=seq(-0.2,1,0.01),
scales=list(x=list(rot=45),y=list(rot=45),tck=0.3,cex=0.1))
scores[,mean(es),by="Name"]
scores[,mean(es),by="Name"]
scores[,mean(vs_0_5),by="Name"]
scores[,mean(vs_1),by="Name"]
scores[,mean(ls),by="Name"]
