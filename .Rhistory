plot(x=modelling_table$r,
y=modelling_table$y,
col=rgb(1-modelling_table$x1,0,modelling_table$x1))
modelling_table
modelling_table
range(modelling_table$x1)
plot(x=modelling_table$r,
y=modelling_table$y,
col=rgb(1-modelling_table$x1/3,0,modelling_table$x1/3))
plot(x=modelling_table$r,
y=modelling_table$y,
col=rgb(1-modelling_table$x1/max(modelling_table$x1),0,modelling_table$x1/max(modelling_table$x1)))
plot(x=modelling_table$r,
y=modelling_table$y,
col=rgb(1-modelling_table$x1/max(modelling_table$x1),0,0))
plot(x=modelling_table$r,
y=modelling_table$y,
col=rgb(1-modelling_table$x1/max(modelling_table$x1),modelling_table$x1/max(modelling_table$x1),modelling_table$x1/max(modelling_table$x1)))
plot(x=modelling_table$r,
y=modelling_table$y,
col=rgb(1-modelling_table$x1/max(modelling_table$x1),0,modelling_table$x1/max(modelling_table$x1)))
test_static_fit <- gac(R = R,
X = list(x1=Z),
Emp_Cov = Cov_R_sim,
cov_func = PowExp,
param_eqns = list(~1,
~1,
~1),
loss="LS")
test_static_fit$gac_coef
test_fit <- gac(R = R,
X = list(x1=Z),
Emp_Cov = Cov_R_sim,
cov_func = PowExp,
param_eqns = list(~1,
~s(x1,bs="bs"),
~1),
loss="WLS",
smoothness_param = 1e-4)
test_static_fit <- gac(R = R,
X = list(x1=Z),
Emp_Cov = Cov_R_sim,
cov_func = PowExp,
param_eqns = list(~1,
~1,
~1),
loss="WLS")
test_static_fit$gac_coef
test_fit <- gac(R = R,
X = list(x1=Z),
Emp_Cov = Cov_R_sim,
cov_func = PowExp,
param_eqns = list(~1,
~s(x1,bs="bs"),
~1),
loss="WLS",
smoothness_param = 1e-4)
image(t(test_fit$Cov_Est))
modelling_table$y_est <- c(test_fit$Cov_Est)
plot(x=modelling_table$r,
y=modelling_table$y_est,
col=rgb(1-modelling_table$x1/max(modelling_table$x1),0,modelling_table$x1/max(modelling_table$x1)))
image(Cov_R_sim-nearPD(Cov_R_sim)$mat)
image(test_fit$Cov_Est-nearPD(test_fit$Cov_Est)$mat)
# Realisations
actuals <- mvnfast::rmvn(n = N,mu=rep(0,ncol(Cov_R)),sigma = Cov_R)
cov_mats <- list(Name=c("True","Empirical","Constant","GAC"),
mat=list(Cov_R,
nearPD(Cov_R_sim)$mat,
nearPD(test_static_fit$Cov_Est)$mat,
nearPD(test_fit$Cov_Est)$mat))
scores <- data.table(index=rep(1:nrow(actuals),length(cov_mats$Name)),
Name=rep(cov_mats$Name,each=nrow(actuals)))
for(cov_i in 1:length(cov_mats$Name)){
print(cov_mats$Name[cov_i])
pb <- progress_bar$new(total = nrow(Z_oos))
for(i in 1:nrow(actuals)){
pb$tick()
# # Draw sample trajectories
# traj <- mvnfast::rmvn(n = 1000,mu=rep(0,ncol(Cov_R)),sigma = cov_mats$mat[[cov_i]])
#
# # es and vs
# scores[index==i & Name==cov_mats$Name[[cov_i]], es := es_sample(y=actuals[i,],dat = t(traj))]
# scores[index==i & Name==cov_mats$Name[[cov_i]], vs_0_5 := vs_sample_quick(y=actuals[i,],dat = t(traj), p = 0.5)]
# scores[index==i & Name==cov_mats$Name[[cov_i]], vs_1 := vs_sample_quick(y=actuals[i,],dat = t(traj), p = 1)]
# log score
scores[index==i & Name==cov_mats$Name[[cov_i]], ls := -log(mvnfast::dmvn(X = actuals[i,],mu = rep(0,ncol(actuals)),sigma = cov_mats$mat[[cov_i]]))]
# Entropy
scores[index==i & Name==cov_mats$Name[[cov_i]], entropy :=
cov_entropy(R_true = Cov_R,R_est = cov_mats$mat[[cov_i]])]
}
}
for(cov_i in 1:length(cov_mats$Name)){
print(cov_mats$Name[cov_i])
pb <- progress_bar$new(total = nrow(actuals))
for(i in 1:nrow(actuals)){
pb$tick()
# # Draw sample trajectories
# traj <- mvnfast::rmvn(n = 1000,mu=rep(0,ncol(Cov_R)),sigma = cov_mats$mat[[cov_i]])
#
# # es and vs
# scores[index==i & Name==cov_mats$Name[[cov_i]], es := es_sample(y=actuals[i,],dat = t(traj))]
# scores[index==i & Name==cov_mats$Name[[cov_i]], vs_0_5 := vs_sample_quick(y=actuals[i,],dat = t(traj), p = 0.5)]
# scores[index==i & Name==cov_mats$Name[[cov_i]], vs_1 := vs_sample_quick(y=actuals[i,],dat = t(traj), p = 1)]
# log score
scores[index==i & Name==cov_mats$Name[[cov_i]], ls := -log(mvnfast::dmvn(X = actuals[i,],mu = rep(0,ncol(actuals)),sigma = cov_mats$mat[[cov_i]]))]
# Entropy
scores[index==i & Name==cov_mats$Name[[cov_i]], entropy :=
cov_entropy(R_true = Cov_R,R_est = cov_mats$mat[[cov_i]])]
}
}
nonstat_cor_plot(Cov_R, filename = "PSCC22_plots/Non-stationary_example.eps")
nonstat_cor_plot <- function(data,filename=NULL,...){
col6 <- colorRampPalette(c("blue","cyan","yellow","red"))
h <- lattice::levelplot(data,
xlab = list(label=TeX("$l_1$"),cex=1.2),
ylab = list(label=TeX("$l_2$"),cex=1.2),
col.regions=col6(600), cuts=100, at=seq(-.1,1,0.01),
scales=list(x=list(at = seq(0,ncol(data),length.out=6),
lab=0:5/5,rot=45),
y=list(at = seq(0,ncol(data),length.out=6),
lab=0:5/5,rot=45),
tck=0.3,cex=1.2))
if(!is.null(filename)){
setEPS(); postscript(filename)
print(h)
dev.off()
}
print(h)
}
nonstat_cor_plot(Cov_R, filename = "PSCC22_plots/Non-stationary_example.eps")
nonstat_cor_plot(Cov_R_sim, filename = "PSCC22_plots/Non-stationary_empirical.eps")
nonstat_cor_plot <- function(data,filename=NULL,...){
col6 <- colorRampPalette(c("blue","cyan","yellow","red"))
h <- lattice::levelplot(data,
xlab = list(label=TeX("$l_1$"),cex=1.2),
ylab = list(label=TeX("$l_2$"),cex=1.2),
col.regions=col6(600), cuts=100, at=seq(-.1,1.05,0.01),
scales=list(x=list(at = seq(0,ncol(data),length.out=6),
lab=0:5/5,rot=45),
y=list(at = seq(0,ncol(data),length.out=6),
lab=0:5/5,rot=45),
tck=0.3,cex=1.2))
if(!is.null(filename)){
setEPS(); postscript(filename)
print(h)
dev.off()
}
print(h)
}
nonstat_cor_plot(Cov_R, filename = "PSCC22_plots/Non-stationary_example.eps")
nonstat_cor_plot(Cov_R_sim, filename = "PSCC22_plots/Non-stationary_empirical.eps")
print(setorder(scores[,mean(entropy),by="Name"],V1))
print(setorder(scores[,mean(ls),by="Name"],V1))
nonstat_cor_plot(test_fit$Cov_Est)
test_fit <- gac(R = R,
X = list(x1=Z),
Emp_Cov = Cov_R_sim,
cov_func = PowExp,
param_eqns = list(~1,
~s(x1,bs="bs"),
~1),
loss="WLSf",
smoothness_param = 1e-4)
nonstat_cor_plot(test_fit$Cov_Est)
test_static_fit <- gac(R = R,
X = list(x1=Z),
Emp_Cov = Cov_R_sim,
cov_func = PowExp,
param_eqns = list(~1,
~1,
~1),
loss="WLSs")
test_static_fit <- gac(R = R,
X = list(x1=Z),
Emp_Cov = Cov_R_sim,
cov_func = PowExp,
param_eqns = list(~1,
~1,
~1),
loss="WLSf")
test_static_fit$gac_coef
test_fit <- gac(R = R,
X = list(x1=Z),
Emp_Cov = Cov_R_sim,
cov_func = PowExp,
param_eqns = list(~1,
~s(x1,bs="bs"),
~1),
loss="WLSf",
smoothness_param = 1e-4)
test_fit
nonstat_cor_plot(test_fit$Cov_Est)
modelling_table$y_est <- c(test_fit$Cov_Est)
plot(x=modelling_table$r,
y=modelling_table$y_est,
col=rgb(1-modelling_table$x1/max(modelling_table$x1),0,modelling_table$x1/max(modelling_table$x1)))
image(Cov_R_sim-nearPD(Cov_R_sim)$mat)
image(test_fit$Cov_Est-nearPD(test_fit$Cov_Est)$mat)
# Realisations
actuals <- mvnfast::rmvn(n = N,mu=rep(0,ncol(Cov_R)),sigma = Cov_R)
cov_mats <- list(Name=c("True","Empirical","Constant","GAC"),
mat=list(Cov_R,
nearPD(Cov_R_sim)$mat,
nearPD(test_static_fit$Cov_Est)$mat,
nearPD(test_fit$Cov_Est)$mat))
scores <- data.table(index=rep(1:nrow(actuals),length(cov_mats$Name)),
Name=rep(cov_mats$Name,each=nrow(actuals)))
for(cov_i in 1:length(cov_mats$Name)){
print(cov_mats$Name[cov_i])
pb <- progress_bar$new(total = nrow(actuals))
for(i in 1:nrow(actuals)){
pb$tick()
# # Draw sample trajectories
# traj <- mvnfast::rmvn(n = 1000,mu=rep(0,ncol(Cov_R)),sigma = cov_mats$mat[[cov_i]])
#
# # es and vs
# scores[index==i & Name==cov_mats$Name[[cov_i]], es := es_sample(y=actuals[i,],dat = t(traj))]
# scores[index==i & Name==cov_mats$Name[[cov_i]], vs_0_5 := vs_sample_quick(y=actuals[i,],dat = t(traj), p = 0.5)]
# scores[index==i & Name==cov_mats$Name[[cov_i]], vs_1 := vs_sample_quick(y=actuals[i,],dat = t(traj), p = 1)]
# log score
scores[index==i & Name==cov_mats$Name[[cov_i]], ls := -log(mvnfast::dmvn(X = actuals[i,],mu = rep(0,ncol(actuals)),sigma = cov_mats$mat[[cov_i]]))]
# Entropy
scores[index==i & Name==cov_mats$Name[[cov_i]], entropy :=
cov_entropy(R_true = Cov_R,R_est = cov_mats$mat[[cov_i]])]
}
}
print(setorder(scores[,mean(entropy),by="Name"],V1))
print(setorder(scores[,mean(ls),by="Name"],V1))
nonstat_cor_plot(test_fit$Cov_Est,filename = "PSCC22_plots/Non-stationary_gac.eps")
nonstat_cor_plot <- function(data,filename=NULL,...){
col6 <- colorRampPalette(c("blue","cyan","yellow","red"))
h <- lattice::levelplot(data,
xlab = list(label=TeX("$l_1$"),cex=1.2),
ylab = list(label=TeX("$l_2$"),cex=1.2),
col.regions=col6(600), cuts=100, at=seq(-.1,1.05,0.01),
scales=list(x=list(at = seq(1,ncol(data),length.out=6),
lab=0:5/5,rot=45),
y=list(at = seq(1,ncol(data),length.out=6),
lab=0:5/5,rot=45),
tck=0.3,cex=1.2))
if(!is.null(filename)){
setEPS(); postscript(filename)
print(h)
dev.off()
}
print(h)
}
nonstat_cor_plot(Cov_R, filename = "PSCC22_plots/Non-stationary_example.eps")
nonstat_cor_plot(Cov_R_sim, filename = "PSCC22_plots/Non-stationary_empirical.eps")
nonstat_cor_plot(test_fit$Cov_Est,filename = "PSCC22_plots/Non-stationary_gac.eps")
h <- lattice::levelplot(data,
xlab = list(label=TeX("$l_1$"),cex=1.2),
ylab = list(label=TeX("$l_2$"),cex=1.2),
col.regions=col6(600), cuts=100, at=seq(-.1,1.1,0.01),
scales=list(x=list(at = seq(1,ncol(data),length.out=6),
lab=0:5/5,rot=45),
y=list(at = seq(1,ncol(data),length.out=6),
lab=0:5/5,rot=45),
tck=0.3,cex=1.2))
nonstat_cor_plot <- function(data,filename=NULL,...){
col6 <- colorRampPalette(c("blue","cyan","yellow","red"))
h <- lattice::levelplot(data,
xlab = list(label=TeX("$l_1$"),cex=1.2),
ylab = list(label=TeX("$l_2$"),cex=1.2),
col.regions=col6(600), cuts=100, at=seq(-.1,1.1,0.01),
scales=list(x=list(at = seq(1,ncol(data),length.out=6),
lab=0:5/5,rot=45),
y=list(at = seq(1,ncol(data),length.out=6),
lab=0:5/5,rot=45),
tck=0.3,cex=1.2),...)
if(!is.null(filename)){
setEPS(); postscript(filename)
print(h)
dev.off()
}
print(h)
}
nonstat_cor_plot(Cov_R, filename = "PSCC22_plots/Non-stationary_example.eps")
nonstat_cor_plot <- function(data,filename=NULL,...){
col6 <- colorRampPalette(c("blue","cyan","yellow","red"))
h <- lattice::levelplot(data,
xlab = list(label=TeX("$l_1$"),cex=1.2),
ylab = list(label=TeX("$l_2$"),cex=1.2),
col.regions=col6(600), cuts=100, at=seq(-.1,1.05,0.01),
scales=list(x=list(at = seq(1,ncol(data),length.out=6),
lab=0:5/5,rot=45),
y=list(at = seq(1,ncol(data),length.out=6),
lab=0:5/5,rot=45),
tck=0.3,cex=1.2),...)
if(!is.null(filename)){
setEPS(); postscript(filename)
print(h)
dev.off()
}
print(h)
}
nonstat_cor_plot(Cov_R, filename = "PSCC22_plots/Non-stationary_example.eps")
scores <- data.table(index=rep(1:nrow(actuals),length(cov_mats$Name)),
Name=rep(cov_mats$Name,each=nrow(actuals)))
for(cov_i in 1:length(cov_mats$Name)){
print(cov_mats$Name[cov_i])
pb <- progress_bar$new(total = nrow(actuals))
for(i in 1:nrow(actuals)){
pb$tick()
# Draw sample trajectories
traj <- mvnfast::rmvn(n = 1000,mu=rep(0,ncol(Cov_R)),sigma = cov_mats$mat[[cov_i]])
# es and vs
scores[index==i & Name==cov_mats$Name[[cov_i]], es := es_sample(y=actuals[i,],dat = t(traj))]
scores[index==i & Name==cov_mats$Name[[cov_i]], vs_0_5 := vs_sample_quick(y=actuals[i,],dat = t(traj), p = 0.5)]
scores[index==i & Name==cov_mats$Name[[cov_i]], vs_1 := vs_sample_quick(y=actuals[i,],dat = t(traj), p = 1)]
# log score
scores[index==i & Name==cov_mats$Name[[cov_i]], ls := -log(mvnfast::dmvn(X = actuals[i,],mu = rep(0,ncol(actuals)),sigma = cov_mats$mat[[cov_i]]))]
# Entropy
scores[index==i & Name==cov_mats$Name[[cov_i]], entropy :=
cov_entropy(R_true = Cov_R,R_est = cov_mats$mat[[cov_i]])]
}
}
test_fit
## Save/load results used in paper
save.image(file="PSCC22_plots/nonstat_example.Rda")
print(setorder(scores[,mean(es),by="Name"],V1))
print(setorder(scores[,mean(vs_0_5),by="Name"],V1))
print(setorder(scores[,mean(vs_1),by="Name"],V1))
print(setorder(scores[,mean(ls),by="Name"],V1))
print(setorder(scores[,mean(entropy),by="Name"],V1))
print(xtable(scores[,.(`Energy`=signif(mean(es),4),
`Log`=signif(mean(ls),4),
`VS-0.5`=signif(mean(vs_0_5),4),
`VS-1`=signif(mean(vs_1),4),
KL = signif(mean(entropy),4)),
by="Name"][order(-Log),],digits = c(NA,3,2,2,1,3),
caption = c("Results of simulation experiment for example \\ref{sec:non-stationary_cov}: Isotropic dynamic covariance."),
label = c("tab:non-stationary_cov")),
caption.placement = "top",table.placement="",
include.rownames=F)
print(xtable(scores[,.(`Energy`=signif(mean(es),4),
`Log`=signif(mean(ls),4),
`VS-0.5`=signif(mean(vs_0_5),4),
`VS-1`=signif(mean(vs_1),4),
KL = signif(mean(entropy),4)),
by="Name"][order(-Log),],#digits = c(NA,3,2,2,1,3),
caption = c("Results of simulation experiment for example \\ref{sec:non-stationary_cov}: Isotropic dynamic covariance."),
label = c("tab:non-stationary_cov")),
caption.placement = "top",table.placement="",
include.rownames=F)
print(xtable(scores[,.(`Energy`=signif(mean(es),4),
`Log`=signif(mean(ls),4),
`VS-0.5`=signif(mean(vs_0_5),4),
`VS-1`=signif(mean(vs_1),4),
KL = signif(mean(entropy),4)),
by="Name"][order(-Log),],digits = c(NA,NA,3,2,2,1,3),
caption = c("Results of simulation experiment for example \\ref{sec:non-stationary_cov}: Isotropic dynamic covariance."),
label = c("tab:non-stationary_cov")),
caption.placement = "top",table.placement="",
include.rownames=F)
print(xtable(scores[,.(`Energy`=signif(mean(es),4),
`Log`=signif(mean(ls),4),
`VS-0.5`=signif(mean(vs_0_5),4),
`VS-1`=signif(mean(vs_1),4),
KL = signif(mean(entropy),4)),
by="Name"][order(-Log),],digits = c(NA,NA,3,2,q,1,3),
caption = c("Results of simulation experiment for example \\ref{sec:non-stationary_cov}: Isotropic dynamic covariance."),
label = c("tab:non-stationary_cov")),
caption.placement = "top",table.placement="",
include.rownames=F)
print(xtable(scores[,.(`Energy`=signif(mean(es),4),
`Log`=signif(mean(ls),4),
`VS-0.5`=signif(mean(vs_0_5),4),
`VS-1`=signif(mean(vs_1),4),
KL = signif(mean(entropy),4)),
by="Name"][order(-Log),],digits = c(NA,NA,3,2,1,1,3),
caption = c("Results of simulation experiment for example \\ref{sec:non-stationary_cov}: Isotropic dynamic covariance."),
label = c("tab:non-stationary_cov")),
caption.placement = "top",table.placement="",
include.rownames=F)
scores
scores[Name=="Constant"]
scores[Name=="Constant",Name:="Stationary"]
save.image(file="PSCC22_plots/nonstat_example.Rda")
## Bootstrap single score
boot(data = scores[Name=="GAC",ls],statistic = function(data, i){mean(data[i])},R=10000)
## Bootstrap single score
boot1 <- boot(data = scores[Name=="GAC",ls],statistic = function(data, i){mean(data[i])},R=10000)
boot.ci(boot1)
## Bootstrap single score
boot1 <- boot(data = scores[Name=="GAC",ls],statistic = function(data, i){mean(data[i])},R=1000)
boot.ci(boot1)
boot1
boot1$t0
boot1$t0
boot1$t
qt(p=0.05/2, df=nrow(boot1$t),lower.tail=F)
boot1$R
boot1$strata
sd(boot1$t)
sd(boot1$t)*qt(p=0.05/2, df=boot1$R,lower.tail=F)
## Bootstrap single score
boot1 <- boot(data = scores[Name=="GAC",ls],statistic = function(data, i){mean(data[i])},R=10000)
sd(boot1$t)*qt(p=0.05/2, df=boot1$R,lower.tail=F)
sd(boot1$t)*qt(p=0.05/2, df=boot1$R-1,lower.tail=F)
sd(boot1$t)*qt(p=0.05/2, df=boot1$R-1,lower.tail=F)
## Bootstrap single score
boot1 <- boot(data = scores[Name=="GAC",entropy],statistic = function(data, i){mean(data[i])},R=10000)
sd(boot1$t)*qt(p=0.05/2, df=boot1$R-1,lower.tail=F)
## Bootstrap single score
boot1 <- boot(data = scores[Name=="GAC",es],statistic = function(data, i){mean(data[i])},R=10000)
sd(boot1$t)*qt(p=0.05/2, df=boot1$R-1,lower.tail=F)
## Bootstrap skill score
scores_boot <- data.table()
ref <- "Empirical"
for(m in scores[Name!=ref,unique(Name)]){
for(s in names(scores)[-c(1:2)]){
boot_data <- boot(data = cbind(scores[Name==m,get(s)],scores[Name==ref,get(s)]),
statistic = function(data, i){
100-100*mean(data[i,1])/mean(data[i,2])
},
R=1000)
if(sd(boot_data$t)==0 | is.na(sd(boot_data$t))){
ci <- data.frame(normal=rep(NA,3))
}else{
ci <- boot.ci(boot_data)
}
scores_boot <- rbind(scores_boot,
data.table(Name=m,Score=s,
Mean=mean(boot_data$t),SD=sd(boot_data$t),
ci_L=ci$normal[2],ci_R=ci$normal[3]))
}
}; rm(boot_data,ci,s,m)
scores_boot
names(scores)[-c(1:2)]
for(s in names(scores)[-c(1:2,7)]){
boot_data <- boot(data = cbind(scores[Name==m,get(s)],scores[Name==ref,get(s)]),
statistic = function(data, i){
100-100*mean(data[i,1])/mean(data[i,2])
},
R=1000)
if(sd(boot_data$t)==0 | is.na(sd(boot_data$t))){
ci <- data.frame(normal=rep(NA,3))
}else{
ci <- boot.ci(boot_data)
}
scores_boot <- rbind(scores_boot,
data.table(Name=m,Score=s,
Mean=mean(boot_data$t),SD=sd(boot_data$t),
ci_L=ci$normal[2],ci_R=ci$normal[3]))
}
boot_data
ci <- boot.ci(boot_data)
## Bootstrap skill score
scores_boot <- data.table()
ref <- "Empirical"
for(m in scores[Name!=ref,unique(Name)]){
for(s in names(scores)[-c(1:2)]){
boot_data <- boot(data = cbind(scores[Name==m,get(s)],scores[Name==ref,get(s)]),
statistic = function(data, i){
100-100*mean(data[i,1])/mean(data[i,2])
},
R=1000)
# if(sd(boot_data$t)==0 | is.na(sd(boot_data$t))){
ci <- data.frame(normal=rep(NA,3))
# }else{
#   ci <- boot.ci(boot_data)
# }
scores_boot <- rbind(scores_boot,
data.table(Name=m,Score=s,
Mean=mean(boot_data$t),SD=sd(boot_data$t),
ci_L=ci$normal[2],ci_R=ci$normal[3]))
}
}; rm(boot_data,ci,s,m)
scores_boot
scores_boot[,ci_L := Mean - SD*qt(0.025,999,lower.tail = F)]
scores_boot[,ci_U := Mean + SD*qt(0.025,999,lower.tail = F)]
scores_boot
scores_boot[,ci_R := NA]
scores_boot[ci_L<0 & ci_R>0, ]
scores_boot[!(ci_L<0 & ci_R>0),Diff_from_zero:=F]
scores_boot[ci_L<0 & ci_R>0,Diff_from_zero:=T]
scores_boot
scores_boot[,ci_R := Mean + SD*qt(0.025,999,lower.tail = F)]
scores_boot[!(ci_L<0 & ci_R>0),Diff_from_zero:=F]
scores_boot[ci_L<0 & ci_R>0,Diff_from_zero:=T]
scores_boot
scores_boot[!(ci_L<0 & ci_R>0),Diff_from_zero:=T]
scores_boot[ci_L<0 & ci_R>0,Diff_from_zero:=F]
scores_boot
## Bootstrap skill score
scores_boot <- data.table()
ref <- "GAC"
for(m in scores[Name!=ref,unique(Name)]){
for(s in names(scores)[-c(1:2)]){
boot_data <- boot(data = cbind(scores[Name==m,get(s)],scores[Name==ref,get(s)]),
statistic = function(data, i){
100-100*mean(data[i,1])/mean(data[i,2])
},
R=1000)
# if(sd(boot_data$t)==0 | is.na(sd(boot_data$t))){
ci <- data.frame(normal=rep(NA,3))
# }else{
#   ci <- boot.ci(boot_data)
# }
scores_boot <- rbind(scores_boot,
data.table(Name=m,Score=s,
Mean=mean(boot_data$t),SD=sd(boot_data$t),
ci_L=ci$normal[2],ci_R=ci$normal[3]))
}
}; rm(boot_data,ci,s,m)
scores_boot[,ci_L := Mean - SD*qt(0.025,999,lower.tail = F)]
scores_boot[,ci_R := Mean + SD*qt(0.025,999,lower.tail = F)]
scores_boot[!(ci_L<0 & ci_R>0),Diff_from_zero:=T]
scores_boot[ci_L<0 & ci_R>0,Diff_from_zero:=F]
scores_boot
